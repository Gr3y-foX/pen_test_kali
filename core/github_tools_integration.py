#!/usr/bin/env python3
"""
üîß GITHUB TOOLS INTEGRATION
============================

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤—ã—Ö GitHub –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å Kali Linux
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤

–í–ù–ò–ú–ê–ù–ò–ï: –¢–æ–ª—å–∫–æ –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π!

–ê–≤—Ç–æ—Ä: –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
"""

import subprocess
import sys
import os
import json
import requests
from pathlib import Path

class GitHubToolsIntegration:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≥–æ—Ç–æ–≤—ã—Ö GitHub –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    """
    
    def __init__(self):
        self.tools_dir = Path("github_tools")
        self.tools_dir.mkdir(exist_ok=True)
        
        # –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö GitHub –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –ø–µ–Ω—Ç–µ—Å—Ç–∞
        self.github_tools = {
            # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ä–∞–∑–≤–µ–¥–∫–∞
            'nmap': {
                'repo': 'nmap/nmap',
                'description': 'Network Mapper - –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ç–∏',
                'install_command': 'sudo apt install nmap'
            },
            'masscan': {
                'repo': 'robertdavidgraham/masscan',
                'description': '–ë—ã—Å—Ç—Ä—ã–π —Å–∫–∞–Ω–µ—Ä –ø–æ—Ä—Ç–æ–≤',
                'install_command': 'sudo apt install masscan'
            },
            'zmap': {
                'repo': 'zmap/zmap',
                'description': '–ë—ã—Å—Ç—Ä–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞',
                'install_command': 'sudo apt install zmap'
            },
            
            # –í–µ–±-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            'sqlmap': {
                'repo': 'sqlmapproject/sqlmap',
                'description': '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SQL injection',
                'install_command': 'sudo apt install sqlmap'
            },
            'nikto': {
                'repo': 'sullo/nikto',
                'description': '–í–µ–±-—Å–∫–∞–Ω–µ—Ä —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π',
                'install_command': 'sudo apt install nikto'
            },
            'gobuster': {
                'repo': 'OJ/gobuster',
                'description': '–ë—ã—Å—Ç—Ä–æ–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –∏ —Ñ–∞–π–ª–æ–≤',
                'install_command': 'sudo apt install gobuster'
            },
            'dirb': {
                'repo': 'v0re/dirb',
                'description': '–°–∫–∞–Ω–µ—Ä –≤–µ–±-–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π',
                'install_command': 'sudo apt install dirb'
            },
            'wfuzz': {
                'repo': 'xmendez/wfuzz',
                'description': '–í–µ–±-—Ñ–∞–∑–∑–µ—Ä',
                'install_command': 'sudo apt install wfuzz'
            },
            
            # Brute force –∞—Ç–∞–∫–∏
            'hydra': {
                'repo': 'vanhauser-thc/thc-hydra',
                'description': '–ë—ã—Å—Ç—Ä—ã–π brute force –∞—Ç–∞–∫–µ—Ä',
                'install_command': 'sudo apt install hydra'
            },
            'john': {
                'repo': 'openwall/john',
                'description': 'John the Ripper - –≤–∑–ª–æ–º –ø–∞—Ä–æ–ª–µ–π',
                'install_command': 'sudo apt install john'
            },
            'hashcat': {
                'repo': 'hashcat/hashcat',
                'description': '–ë—ã—Å—Ç—Ä—ã–π –≤–∑–ª–æ–º —Ö–µ—à–µ–π',
                'install_command': 'sudo apt install hashcat'
            },
            
            # –≠–∫—Å–ø–ª–æ–π—Ç—ã –∏ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏
            'metasploit': {
                'repo': 'rapid7/metasploit-framework',
                'description': '–§—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤',
                'install_command': 'curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb | sudo bash'
            },
            'exploitdb': {
                'repo': 'offensive-security/exploitdb',
                'description': '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤',
                'install_command': 'sudo apt install exploitdb'
            },
            'searchsploit': {
                'repo': 'offensive-security/exploitdb',
                'description': '–ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤',
                'install_command': 'sudo apt install exploitdb'
            },
            
            # –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
            'burpsuite': {
                'repo': 'PortSwigger/burp-suite-community',
                'description': '–í–µ–±-–ø—Ä–æ–∫—Å–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
                'install_command': 'sudo apt install burpsuite'
            },
            'wireshark': {
                'repo': 'wireshark/wireshark',
                'description': '–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–µ—Ç–µ–≤–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞',
                'install_command': 'sudo apt install wireshark'
            },
            'aircrack-ng': {
                'repo': 'aircrack-ng/aircrack-ng',
                'description': '–ù–∞–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è WiFi',
                'install_command': 'sudo apt install aircrack-ng'
            },
            'reaver': {
                'repo': 't6x/reaver-wps-fork-t6x',
                'description': '–ê—Ç–∞–∫–∞ –Ω–∞ WPS',
                'install_command': 'sudo apt install reaver'
            },
            
            # Python –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
            'scapy': {
                'repo': 'secdev/scapy',
                'description': '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Ç–µ–≤—ã–º–∏ –ø–∞–∫–µ—Ç–∞–º–∏',
                'install_command': 'pip3 install scapy'
            },
            'requests': {
                'repo': 'psf/requests',
                'description': 'HTTP –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è Python',
                'install_command': 'pip3 install requests'
            },
            'paramiko': {
                'repo': 'paramiko/paramiko',
                'description': 'SSH2 –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è Python',
                'install_command': 'pip3 install paramiko'
            },
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
            'nuclei': {
                'repo': 'projectdiscovery/nuclei',
                'description': '–ë—ã—Å—Ç—Ä–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π',
                'install_command': 'sudo apt install nuclei'
            },
            'subfinder': {
                'repo': 'projectdiscovery/subfinder',
                'description': '–ü–æ–∏—Å–∫ –ø–æ–¥–¥–æ–º–µ–Ω–æ–≤',
                'install_command': 'sudo apt install subfinder'
            },
            'ffuf': {
                'repo': 'ffuf/ffuf',
                'description': '–ë—ã—Å—Ç—Ä—ã–π –≤–µ–±-—Ñ–∞–∑–∑–µ—Ä',
                'install_command': 'sudo apt install ffuf'
            }
        }
    
    def install_tool(self, tool_name):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
        """
        if tool_name not in self.github_tools:
            print(f"‚ùå –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {tool_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ")
            return False
        
        tool_info = self.github_tools[tool_name]
        print(f"üîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é {tool_name}: {tool_info['description']}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        install_command = tool_info['install_command']
        print(f"üíª –í—ã–ø–æ–ª–Ω—è—é: {install_command}")
        
        try:
            result = subprocess.run(install_command, shell=True, capture_output=True, text=True)
            if result.returncode == 0:
                print(f"‚úÖ {tool_name} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {tool_name}: {result.stderr}")
                return False
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ {tool_name}: {e}")
            return False
    
    def install_all_tools(self):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        """
        print("üîß –£–°–¢–ê–ù–û–í–ö–ê –í–°–ï–• –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í")
        print("="*60)
        
        success_count = 0
        total_count = len(self.github_tools)
        
        for tool_name in self.github_tools:
            if self.install_tool(tool_name):
                success_count += 1
            print()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        
        print("="*60)
        print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –£–°–¢–ê–ù–û–í–ö–ò:")
        print(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {success_count}/{total_count}")
        print(f"  ‚ùå –û—à–∏–±–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {total_count - success_count}/{total_count}")
    
    def install_category(self, category):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        """
        categories = {
            'scanning': ['nmap', 'masscan', 'zmap', 'nuclei', 'subfinder'],
            'web': ['sqlmap', 'nikto', 'gobuster', 'dirb', 'wfuzz', 'ffuf', 'burpsuite'],
            'bruteforce': ['hydra', 'john', 'hashcat'],
            'exploits': ['metasploit', 'exploitdb', 'searchsploit'],
            'wireless': ['aircrack-ng', 'reaver'],
            'network': ['wireshark', 'scapy'],
            'python': ['scapy', 'requests', 'paramiko']
        }
        
        if category not in categories:
            print(f"‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è {category} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(categories.keys())}")
            return
        
        tools = categories[category]
        print(f"üîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category}")
        print("="*60)
        
        for tool in tools:
            self.install_tool(tool)
            print()
    
    def check_tool_availability(self, tool_name):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –≤ —Å–∏—Å—Ç–µ–º–µ
        """
        if tool_name not in self.github_tools:
            print(f"‚ùå –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {tool_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ")
            return False
        
        tool_info = self.github_tools[tool_name]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
        try:
            result = subprocess.run(f"which {tool_name}", shell=True, capture_output=True, text=True)
            if result.returncode == 0:
                print(f"‚úÖ {tool_name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {result.stdout.strip()}")
                return True
            else:
                print(f"‚ùå {tool_name} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {tool_name}: {e}")
            return False
    
    def check_all_tools(self):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        """
        print("üîç –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ù–û–°–¢–ò –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í")
        print("="*60)
        
        available_count = 0
        total_count = len(self.github_tools)
        
        for tool_name in self.github_tools:
            if self.check_tool_availability(tool_name):
                available_count += 1
        
        print("="*60)
        print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò:")
        print(f"  ‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ: {available_count}/{total_count}")
        print(f"  ‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ: {total_count - available_count}/{total_count}")
    
    def download_wordlists(self):
        """
        –°–∫–∞—á–∏–≤–∞–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è brute force –∞—Ç–∞–∫
        """
        print("üìö –°–ö–ê–ß–ò–í–ê–ù–ò–ï –°–õ–û–í–ê–†–ï–ô –î–õ–Ø BRUTE FORCE")
        print("="*60)
        
        wordlists_dir = Path("wordlists")
        wordlists_dir.mkdir(exist_ok=True)
        
        # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏
        wordlists = {
            'rockyou.txt': {
                'url': 'https://github.com/brannondorsey/naive-hashcat/releases/download/data/rockyou.txt',
                'description': '–ü–æ–ø—É–ª—è—Ä–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –ø–∞—Ä–æ–ª–µ–π'
            },
            'common_passwords.txt': {
                'url': 'https://raw.githubusercontent.com/danielmiessler/SecLists/master/Passwords/Common-Credentials/10-million-password-list-top-1000000.txt',
                'description': '–°–ø–∏—Å–æ–∫ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π'
            },
            'usernames.txt': {
                'url': 'https://raw.githubusercontent.com/danielmiessler/SecLists/master/Usernames/xato-net-10-million-usernames.txt',
                'description': '–°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
            },
            'directories.txt': {
                'url': 'https://raw.githubusercontent.com/danielmiessler/SecLists/master/Discovery/Web-Content/common.txt',
                'description': '–°–ø–∏—Å–æ–∫ –≤–µ–±-–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π'
            }
        }
        
        for filename, info in wordlists.items():
            filepath = wordlists_dir / filename
            if filepath.exists():
                print(f"‚ö†Ô∏è {filename} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞—é")
                continue
            
            print(f"üì• –°–∫–∞—á–∏–≤–∞—é {filename}: {info['description']}")
            try:
                response = requests.get(info['url'], stream=True)
                if response.status_code == 200:
                    with open(filepath, 'wb') as f:
                        for chunk in response.iter_content(chunk_size=8192):
                            f.write(chunk)
                    print(f"‚úÖ {filename} —Å–∫–∞—á–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {filename}: HTTP {response.status_code}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {filename}: {e}")
    
    def setup_kali_environment(self):
        """
        –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å—Ä–µ–¥—É Kali Linux –¥–ª—è –ø–µ–Ω—Ç–µ—Å—Ç–∞
        """
        print("üîß –ù–ê–°–¢–†–û–ô–ö–ê –°–†–ï–î–´ KALI LINUX")
        print("="*60)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
        print("üîÑ –û–±–Ω–æ–≤–ª—è—é —Å–∏—Å—Ç–µ–º—É...")
        subprocess.run("sudo apt update && sudo apt upgrade -y", shell=True)
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
        print("üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã...")
        additional_packages = [
            'curl', 'wget', 'git', 'python3-pip', 'python3-venv',
            'build-essential', 'libssl-dev', 'libffi-dev',
            'ruby', 'golang', 'nodejs', 'npm'
        ]
        
        for package in additional_packages:
            print(f"  üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é {package}...")
            subprocess.run(f"sudo apt install -y {package}", shell=True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Python –æ–∫—Ä—É–∂–µ–Ω–∏—è
        print("üêç –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é Python –æ–∫—Ä—É–∂–µ–Ω–∏–µ...")
        subprocess.run("python3 -m pip install --upgrade pip", shell=True)
        subprocess.run("pip3 install virtualenv", shell=True)
        
        print("‚úÖ –°—Ä–µ–¥–∞ Kali Linux –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
    
    def generate_tool_report(self):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ–± —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö
        """
        print("üìä –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–ß–ï–¢–ê –û–ë –ò–ù–°–¢–†–£–ú–ï–ù–¢–ê–•")
        print("="*60)
        
        report = {
            'timestamp': str(subprocess.run('date', shell=True, capture_output=True, text=True).stdout.strip()),
            'system_info': {
                'os': subprocess.run('uname -a', shell=True, capture_output=True, text=True).stdout.strip(),
                'python_version': subprocess.run('python3 --version', shell=True, capture_output=True, text=True).stdout.strip()
            },
            'tools_status': {}
        }
        
        for tool_name in self.github_tools:
            try:
                result = subprocess.run(f"which {tool_name}", shell=True, capture_output=True, text=True)
                report['tools_status'][tool_name] = {
                    'installed': result.returncode == 0,
                    'path': result.stdout.strip() if result.returncode == 0 else None,
                    'description': self.github_tools[tool_name]['description']
                }
            except:
                report['tools_status'][tool_name] = {
                    'installed': False,
                    'path': None,
                    'description': self.github_tools[tool_name]['description']
                }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        report_file = 'tools_report.json'
        with open(report_file, 'w') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        
        print(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {report_file}")
        
        # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        installed_count = sum(1 for tool in report['tools_status'].values() if tool['installed'])
        total_count = len(report['tools_status'])
        
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"  ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {installed_count}/{total_count}")
        print(f"  ‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {total_count - installed_count}/{total_count}")

def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    """
    parser = argparse.ArgumentParser(description='GitHub Tools Integration for Kali Linux')
    parser.add_argument('--install-all', action='store_true', help='–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã')
    parser.add_argument('--install-category', help='–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
    parser.add_argument('--install-tool', help='–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç')
    parser.add_argument('--check-all', action='store_true', help='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã')
    parser.add_argument('--download-wordlists', action='store_true', help='–°–∫–∞—á–∞—Ç—å —Å–ª–æ–≤–∞—Ä–∏')
    parser.add_argument('--setup-kali', action='store_true', help='–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å—Ä–µ–¥—É Kali Linux')
    parser.add_argument('--generate-report', action='store_true', help='–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç')
    
    args = parser.parse_args()
    
    integration = GitHubToolsIntegration()
    
    try:
        if args.install_all:
            integration.install_all_tools()
        elif args.install_category:
            integration.install_category(args.install_category)
        elif args.install_tool:
            integration.install_tool(args.install_tool)
        elif args.check_all:
            integration.check_all_tools()
        elif args.download_wordlists:
            integration.download_wordlists()
        elif args.setup_kali:
            integration.setup_kali_environment()
        elif args.generate_report:
            integration.generate_tool_report()
        else:
            print("üîß GITHUB TOOLS INTEGRATION")
            print("="*60)
            print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ü–∏–π")
            print("\n–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
            print("  python3 github_tools_integration.py --install-all")
            print("  python3 github_tools_integration.py --install-category web")
            print("  python3 github_tools_integration.py --install-tool nmap")
            print("  python3 github_tools_integration.py --check-all")
            print("  python3 github_tools_integration.py --download-wordlists")
            print("  python3 github_tools_integration.py --setup-kali")
            print("  python3 github_tools_integration.py --generate-report")
            
    except KeyboardInterrupt:
        print("\nüõë –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
