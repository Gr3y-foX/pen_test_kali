
#!/usr/bin/env python3
"""
–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Å–µ—Ç–µ–≤–æ–π —Å–∫–∞–Ω–µ—Ä –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤ —Ä–∞–∑–≤–µ–¥–∫–∏
–í–ù–ò–ú–ê–ù–ò–ï: –¢–æ–ª—å–∫–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Å—Ä–µ–¥–µ!

–ê–≤—Ç–æ—Ä: –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
–õ–∏—Ü–µ–Ω–∑–∏—è: –¢–æ–ª—å–∫–æ –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π
"""

import socket
import threading
import subprocess
import sys
import time
import argparse
from concurrent.futures import ThreadPoolExecutor, as_completed
import requests
from scapy.all import *
import nmap
import ipaddress

class NetworkScanner:
    """
    –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Å–µ—Ç–µ–≤–æ–π —Å–∫–∞–Ω–µ—Ä –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –º–µ—Ç–æ–¥–æ–≤ —Ä–∞–∑–≤–µ–¥–∫–∏
    """
    
    def __init__(self, target_network):
        self.target_network = target_network
        self.open_ports = {}
        self.alive_hosts = []
        self.vulnerabilities = {}
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if not self._is_safe_network(target_network):
            print("‚ùå –û–®–ò–ë–ö–ê: –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π!")
            print("–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Å–µ—Ç–∏: 127.0.0.0/8, 192.168.0.0/16, 10.0.0.0/8, 172.16.0.0/12")
            sys.exit(1)
    
    def _is_safe_network(self, network):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–µ—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        try:
            net = ipaddress.IPv4Network(network, strict=False)
            
            # –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —á–∞—Å—Ç–Ω—ã–µ —Å–µ—Ç–∏
            safe_networks = [
                ipaddress.IPv4Network('127.0.0.0/8'),    # localhost
                ipaddress.IPv4Network('192.168.0.0/16'), # —á–∞—Å—Ç–Ω–∞—è —Å–µ—Ç—å –∫–ª–∞—Å—Å–∞ C
                ipaddress.IPv4Network('10.0.0.0/8'),     # —á–∞—Å—Ç–Ω–∞—è —Å–µ—Ç—å –∫–ª–∞—Å—Å–∞ A
                ipaddress.IPv4Network('172.16.0.0/12'),  # —á–∞—Å—Ç–Ω–∞—è —Å–µ—Ç—å –∫–ª–∞—Å—Å–∞ B
            ]
            
            return any(net.subnet_of(safe_net) or net == safe_net for safe_net in safe_networks)
        except:
            return False
    
    def ping_sweep(self, timeout=1):
        """
        Ping sweep –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∂–∏–≤—ã—Ö —Ö–æ—Å—Ç–æ–≤ –≤ —Å–µ—Ç–∏
        """
        print(f"üîç –í—ã–ø–æ–ª–Ω—è—é ping sweep –¥–ª—è —Å–µ—Ç–∏ {self.target_network}")
        
        try:
            network = ipaddress.IPv4Network(self.target_network, strict=False)
        except ValueError as e:
            print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–µ—Ç–∏: {e}")
            return []
        
        alive_hosts = []
        
        def ping_host(ip):
            """–ü–∏–Ω–≥ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ö–æ—Å—Ç–∞"""
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∫–æ–º–∞–Ω–¥—É ping
                if sys.platform.startswith('win'):
                    cmd = ['ping', '-n', '1', '-w', str(timeout * 1000), str(ip)]
                else:
                    cmd = ['ping', '-c', '1', '-W', str(timeout), str(ip)]
                
                result = subprocess.run(cmd, capture_output=True, text=True, timeout=timeout+1)
                
                if result.returncode == 0:
                    print(f"‚úÖ {ip} - –∂–∏–≤")
                    return str(ip)
                    
            except subprocess.TimeoutExpired:
                pass
            except Exception as e:
                pass
            
            return None
        
        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –ø–∏–Ω–≥ —Ö–æ—Å—Ç–æ–≤
        with ThreadPoolExecutor(max_workers=50) as executor:
            futures = {executor.submit(ping_host, ip): ip for ip in network.hosts()}
            
            for future in as_completed(futures):
                result = future.result()
                if result:
                    alive_hosts.append(result)
        
        self.alive_hosts = alive_hosts
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(alive_hosts)} –∂–∏–≤—ã—Ö —Ö–æ—Å—Ç–æ–≤")
        return alive_hosts
    
    def arp_scan(self):
        """
        ARP —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏
        """
        print(f"üîç –í—ã–ø–æ–ª–Ω—è—é ARP —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è {self.target_network}")
        
        try:
            # –°–æ–∑–¥–∞–µ–º ARP –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—Å–µ–π —Å–µ—Ç–∏
            arp_request = ARP(pdst=self.target_network)
            broadcast = Ether(dst="ff:ff:ff:ff:ff:ff")
            arp_request_broadcast = broadcast / arp_request
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç—ã
            answered_list = srp(arp_request_broadcast, timeout=2, verbose=False)[0]
            
            hosts_info = []
            for element in answered_list:
                host_dict = {
                    "ip": element[1].psrc,
                    "mac": element[1].hwsrc
                }
                hosts_info.append(host_dict)
                print(f"‚úÖ {element[1].psrc} - {element[1].hwsrc}")
            
            print(f"üìä ARP —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ù–∞–π–¥–µ–Ω–æ {len(hosts_info)} —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
            return hosts_info
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ ARP —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return []
    
    def port_scan_host(self, host, ports, timeout=1):
        """
        –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ö–æ—Å—Ç–µ
        """
        open_ports = []
        
        def scan_port(port):
            """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞"""
            try:
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(timeout)
                result = sock.connect_ex((host, port))
                sock.close()
                
                if result == 0:
                    return port
            except:
                pass
            return None
        
        print(f"üîç –°–∫–∞–Ω–∏—Ä—É—é –ø–æ—Ä—Ç—ã –Ω–∞ {host}")
        
        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤
        with ThreadPoolExecutor(max_workers=100) as executor:
            futures = {executor.submit(scan_port, port): port for port in ports}
            
            for future in as_completed(futures):
                result = future.result()
                if result:
                    open_ports.append(result)
                    print(f"  ‚úÖ –ü–æ—Ä—Ç {result} –æ—Ç–∫—Ä—ã—Ç")
        
        return sorted(open_ports)
    
    def comprehensive_port_scan(self, common_ports_only=True):
        """
        –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤ –Ω–∞ –≤—Å–µ—Ö –∂–∏–≤—ã—Ö —Ö–æ—Å—Ç–∞—Ö
        """
        if not self.alive_hosts:
            print("‚ö†Ô∏è  –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∂–∏–≤—ã—Ö —Ö–æ—Å—Ç–æ–≤")
            return
        
        # –°–ø–∏—Å–æ–∫ –Ω–∞–∏–±–æ–ª–µ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤
        common_ports = [
            21, 22, 23, 25, 53, 80, 110, 111, 135, 139, 143, 443, 993, 995, 1723, 3306, 3389, 5900, 8080
        ]
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ—Ä—Ç–æ–≤ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        extended_ports = list(range(1, 1025)) + [1433, 1521, 2049, 2121, 2375, 3306, 3389, 5432, 5900, 6379, 8080, 8443, 9200, 27017]
        
        ports_to_scan = common_ports if common_ports_only else extended_ports
        
        print(f"üîç –°–∫–∞–Ω–∏—Ä—É—é {len(ports_to_scan)} –ø–æ—Ä—Ç–æ–≤ –Ω–∞ {len(self.alive_hosts)} —Ö–æ—Å—Ç–∞—Ö")
        
        for host in self.alive_hosts:
            open_ports = self.port_scan_host(host, ports_to_scan)
            if open_ports:
                self.open_ports[host] = open_ports
        
        return self.open_ports
    
    def service_detection(self, host, port):
        """
        –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞, —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ –Ω–∞ –ø–æ—Ä—Ç—É
        """
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(3)
            sock.connect((host, port))
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º HTTP –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–∏—Å–æ–≤
            if port in [80, 443, 8080, 8443]:
                sock.send(b"GET / HTTP/1.1\r\nHost: " + host.encode() + b"\r\n\r\n")
                banner = sock.recv(1024).decode('utf-8', errors='ignore')
                
            # –î–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ—Ä—Ç–æ–≤ –ø—Ä–æ—Å—Ç–æ —á–∏—Ç–∞–µ–º –±–∞–Ω–Ω–µ—Ä
            else:
                banner = sock.recv(1024).decode('utf-8', errors='ignore')
            
            sock.close()
            return banner.strip()[:200]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –±–∞–Ω–Ω–µ—Ä–∞
            
        except:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å"
    
    def vulnerability_scan(self):
        """
        –ë–∞–∑–æ–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
        """
        print("üîç –í—ã–ø–æ–ª–Ω—è—é –ø–æ–∏—Å–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π...")
        
        for host in self.open_ports:
            host_vulns = []
            
            for port in self.open_ports[host]:
                service_banner = self.service_detection(host, port)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —É—è–∑–≤–∏–º—ã–µ —Å–µ—Ä–≤–∏—Å—ã
                vulns = self._check_known_vulnerabilities(port, service_banner)
                if vulns:
                    host_vulns.extend(vulns)
                
                print(f"  üìã {host}:{port} - {service_banner[:50]}...")
            
            if host_vulns:
                self.vulnerabilities[host] = host_vulns
        
        return self.vulnerabilities
    
    def _check_known_vulnerabilities(self, port, banner):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –ø–æ –ø–æ—Ä—Ç—É –∏ –±–∞–Ω–Ω–µ—Ä—É
        """
        vulnerabilities = []
        banner_lower = banner.lower()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–∏—Å–æ–≤
        if port in [80, 443, 8080, 8443]:
            if 'apache' in banner_lower:
                if '2.2' in banner_lower or '2.0' in banner_lower:
                    vulnerabilities.append("–£—Å—Ç–∞—Ä–µ–≤—à–∞—è –≤–µ—Ä—Å–∏—è Apache - –≤–æ–∑–º–æ–∂–Ω—ã —É—è–∑–≤–∏–º–æ—Å—Ç–∏")
            
            if 'nginx' in banner_lower:
                if any(v in banner_lower for v in ['1.0', '1.1', '1.2']):
                    vulnerabilities.append("–£—Å—Ç–∞—Ä–µ–≤—à–∞—è –≤–µ—Ä—Å–∏—è Nginx - –≤–æ–∑–º–æ–∂–Ω—ã —É—è–∑–≤–∏–º–æ—Å—Ç–∏")
            
            if 'iis' in banner_lower:
                vulnerabilities.append("IIS —Å–µ—Ä–≤–µ—Ä - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ Windows")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ SSH
        elif port == 22:
            if 'openssh' in banner_lower:
                if any(v in banner_lower for v in ['5.', '6.', '7.0', '7.1', '7.2']):
                    vulnerabilities.append("–£—Å—Ç–∞—Ä–µ–≤—à–∞—è –≤–µ—Ä—Å–∏—è OpenSSH - –≤–æ–∑–º–æ–∂–Ω—ã —É—è–∑–≤–∏–º–æ—Å—Ç–∏")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ FTP
        elif port == 21:
            if 'vsftpd' in banner_lower:
                if '2.3.4' in banner_lower:
                    vulnerabilities.append("–ö–†–ò–¢–ò–ß–ù–û: vsftpd 2.3.4 - –∏–∑–≤–µ—Å—Ç–Ω–∞—è backdoor —É—è–∑–≤–∏–º–æ—Å—Ç—å!")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Telnet
        elif port == 23:
            vulnerabilities.append("–í–ù–ò–ú–ê–ù–ò–ï: Telnet –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–µ–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—É—é –ø–µ—Ä–µ–¥–∞—á—É –¥–∞–Ω–Ω—ã—Ö")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ MySQL
        elif port == 3306:
            vulnerabilities.append("MySQL —Å–µ—Ä–≤–µ—Ä - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ RDP
        elif port == 3389:
            vulnerabilities.append("RDP —Å–µ—Ä–≤–∏—Å - —É—è–∑–≤–∏–º –∫ brute force –∞—Ç–∞–∫–∞–º")
        
        return vulnerabilities
    
    def nmap_scan(self, scan_type='sS'):
        """
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ nmap –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        print(f"üîç –í—ã–ø–æ–ª–Ω—è—é Nmap —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ({scan_type}) –¥–ª—è {self.target_network}")
        
        try:
            nm = nmap.PortScanner()
            
            # –†–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            scan_args = {
                'sS': '-sS',  # SYN scan
                'sT': '-sT',  # TCP connect scan
                'sU': '-sU',  # UDP scan
                'sV': '-sV',  # Version detection
                'O': '-O',    # OS detection
                'A': '-A'     # Aggressive scan
            }
            
            result = nm.scan(self.target_network, arguments=scan_args.get(scan_type, '-sS'))
            
            for host in nm.all_hosts():
                print(f"\nüéØ –•–æ—Å—Ç: {host}")
                print(f"   –°—Ç–∞—Ç—É—Å: {nm[host].state()}")
                
                if 'osmatch' in nm[host]:
                    for osmatch in nm[host]['osmatch']:
                        print(f"   –û–°: {osmatch['name']} ({osmatch['accuracy']}%)")
                
                for proto in nm[host].all_protocols():
                    ports = nm[host][proto].keys()
                    for port in ports:
                        state = nm[host][proto][port]['state']
                        service = nm[host][proto][port].get('name', 'unknown')
                        version = nm[host][proto][port].get('version', '')
                        
                        print(f"   üì° {port}/{proto}: {state} ({service} {version})")
            
            return result
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ Nmap —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return None
    
    def generate_report(self):
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
        """
        print("\n" + "="*60)
        print("üìä –û–¢–ß–ï–¢ –û –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ò –°–ï–¢–ò")
        print("="*60)
        
        print(f"\nüéØ –¶–µ–ª–µ–≤–∞—è —Å–µ—Ç—å: {self.target_network}")
        print(f"üìÖ –í—Ä–µ–º—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {time.strftime('%Y-%m-%d %H:%M:%S')}")
        
        print(f"\nüñ•Ô∏è  –ñ–ò–í–´–ï –•–û–°–¢–´ ({len(self.alive_hosts)}):")
        for host in self.alive_hosts:
            print(f"  ‚Ä¢ {host}")
        
        print(f"\nüö™ –û–¢–ö–†–´–¢–´–ï –ü–û–†–¢–´:")
        for host, ports in self.open_ports.items():
            print(f"  üéØ {host}:")
            for port in ports:
                service = self.service_detection(host, port)
                print(f"    ‚Ä¢ {port}/tcp - {service[:30]}...")
        
        print(f"\n‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –£–Ø–ó–í–ò–ú–û–°–¢–ò:")
        if self.vulnerabilities:
            for host, vulns in self.vulnerabilities.items():
                print(f"  üéØ {host}:")
                for vuln in vulns:
                    print(f"    ‚ùó {vuln}")
        else:
            print("  ‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
        
        print(f"\nüõ°Ô∏è  –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:")
        print("  ‚Ä¢ –ó–∞–∫—Ä–æ–π—Ç–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–æ—Ä—Ç—ã")
        print("  ‚Ä¢ –û–±–Ω–æ–≤–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–µ—Ä—Å–∏–π")
        print("  ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏–ª—å–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ –∏ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é")
        print("  ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∞–π—Ä–≤–æ–ª –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞")
        print("  ‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –º–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ —Å–µ—Ç–µ–≤—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")

def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–µ—Ç–µ–≤–æ–≥–æ —Å–∫–∞–Ω–µ—Ä–∞
    """
    print("=" * 60)
    print("üîç –û–ë–†–ê–ó–û–í–ê–¢–ï–õ–¨–ù–´–ô –°–ï–¢–ï–í–û–ô –°–ö–ê–ù–ï–†")
    print("=" * 60)
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –¢–æ–ª—å–∫–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏!")
    print("‚ö†Ô∏è  –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á—É–∂–∏—Ö —Å–µ—Ç–µ–π –±–µ–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ù–ï–ó–ê–ö–û–ù–ù–û!")
    print("=" * 60)
    
    parser = argparse.ArgumentParser(description='–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Å–µ—Ç–µ–≤–æ–π —Å–∫–∞–Ω–µ—Ä')
    parser.add_argument('network', help='–¶–µ–ª–µ–≤–∞—è —Å–µ—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 192.168.1.0/24)')
    parser.add_argument('--ping', action='store_true', help='–í—ã–ø–æ–ª–Ω–∏—Ç—å ping sweep')
    parser.add_argument('--arp', action='store_true', help='–í—ã–ø–æ–ª–Ω–∏—Ç—å ARP —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ')
    parser.add_argument('--ports', action='store_true', help='–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ä—Ç—ã')
    parser.add_argument('--full-ports', action='store_true', help='–ü–æ–ª–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤')
    parser.add_argument('--vulns', action='store_true', help='–ü–æ–∏—Å–∫ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π')
    parser.add_argument('--nmap', choices=['sS', 'sT', 'sU', 'sV', 'O', 'A'], 
                       help='Nmap —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ')
    parser.add_argument('--all', action='store_true', help='–í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –≤–∏–¥—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è')
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–µ–º —Å–∫–∞–Ω–µ—Ä
    scanner = NetworkScanner(args.network)
    
    try:
        if args.all or args.ping:
            scanner.ping_sweep()
        
        if args.all or args.arp:
            scanner.arp_scan()
        
        if args.all or args.ports or args.full_ports:
            if not scanner.alive_hosts:
                scanner.ping_sweep()
            scanner.comprehensive_port_scan(common_ports_only=not args.full_ports)
        
        if args.all or args.vulns:
            if not scanner.open_ports:
                if not scanner.alive_hosts:
                    scanner.ping_sweep()
                scanner.comprehensive_port_scan()
            scanner.vulnerability_scan()
        
        if args.nmap:
            scanner.nmap_scan(args.nmap)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        scanner.generate_report()
        
    except KeyboardInterrupt:
        print("\nüõë –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
